import {
  _assertThisInitialized,
  _getPrototypeOf,
  _inherits,
  _objectWithoutProperties,
  _possibleConstructorReturn
} from "./chunk-7AHSZE44.js";
import {
  ClassNames,
  _extends,
  css,
  jsx,
  keyframes
} from "./chunk-RFWCYQMM.js";
import {
  require_prop_types
} from "./chunk-63D3DKG7.js";
import "./chunk-AAY5IJNO.js";
import {
  require_react_dom
} from "./chunk-GSZ7ISAW.js";
import {
  require_dist
} from "./chunk-W6XHFP3F.js";
import {
  _classCallCheck,
  _createClass,
  _defineProperty,
  _slicedToArray,
  _toConsumableArray,
  _typeof
} from "./chunk-FPC23FGM.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __toESM
} from "./chunk-ROME4SDB.js";

// node_modules/react-fast-compare/index.js
var require_react_fast_compare = __commonJS({
  "node_modules/react-fast-compare/index.js"(exports, module) {
    var hasElementType = typeof Element !== "undefined";
    var hasMap = typeof Map === "function";
    var hasSet = typeof Set === "function";
    var hasArrayBuffer = typeof ArrayBuffer === "function" && !!ArrayBuffer.isView;
    function equal(a, b) {
      if (a === b)
        return true;
      if (a && b && typeof a == "object" && typeof b == "object") {
        if (a.constructor !== b.constructor)
          return false;
        var length, i, keys;
        if (Array.isArray(a)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (!equal(a[i], b[i]))
              return false;
          return true;
        }
        var it;
        if (hasMap && a instanceof Map && b instanceof Map) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!equal(i.value[1], b.get(i.value[0])))
              return false;
          return true;
        }
        if (hasSet && a instanceof Set && b instanceof Set) {
          if (a.size !== b.size)
            return false;
          it = a.entries();
          while (!(i = it.next()).done)
            if (!b.has(i.value[0]))
              return false;
          return true;
        }
        if (hasArrayBuffer && ArrayBuffer.isView(a) && ArrayBuffer.isView(b)) {
          length = a.length;
          if (length != b.length)
            return false;
          for (i = length; i-- !== 0; )
            if (a[i] !== b[i])
              return false;
          return true;
        }
        if (a.constructor === RegExp)
          return a.source === b.source && a.flags === b.flags;
        if (a.valueOf !== Object.prototype.valueOf && typeof a.valueOf === "function" && typeof b.valueOf === "function")
          return a.valueOf() === b.valueOf();
        if (a.toString !== Object.prototype.toString && typeof a.toString === "function" && typeof b.toString === "function")
          return a.toString() === b.toString();
        keys = Object.keys(a);
        length = keys.length;
        if (length !== Object.keys(b).length)
          return false;
        for (i = length; i-- !== 0; )
          if (!Object.prototype.hasOwnProperty.call(b, keys[i]))
            return false;
        if (hasElementType && a instanceof Element)
          return false;
        for (i = length; i-- !== 0; ) {
          if ((keys[i] === "_owner" || keys[i] === "__v" || keys[i] === "__o") && a.$$typeof) {
            continue;
          }
          if (!equal(a[keys[i]], b[keys[i]]))
            return false;
        }
        return true;
      }
      return a !== a && b !== b;
    }
    module.exports = function isEqual2(a, b) {
      try {
        return equal(a, b);
      } catch (error) {
        if ((error.message || "").match(/stack|recursion/i)) {
          console.warn("react-fast-compare cannot handle circular refs");
          return false;
        }
        throw error;
      }
    };
  }
});

// node_modules/warning/warning.js
var require_warning = __commonJS({
  "node_modules/warning/warning.js"(exports, module) {
    "use strict";
    var __DEV__ = true;
    var warning2 = function() {
    };
    if (__DEV__) {
      printWarning = function printWarning2(format, args) {
        var len = arguments.length;
        args = new Array(len > 1 ? len - 1 : 0);
        for (var key = 1; key < len; key++) {
          args[key - 1] = arguments[key];
        }
        var argIndex = 0;
        var message = "Warning: " + format.replace(/%s/g, function() {
          return args[argIndex++];
        });
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
      warning2 = function(condition, format, args) {
        var len = arguments.length;
        args = new Array(len > 2 ? len - 2 : 0);
        for (var key = 2; key < len; key++) {
          args[key - 2] = arguments[key];
        }
        if (format === void 0) {
          throw new Error(
            "`warning(condition, format, ...args)` requires a warning message argument"
          );
        }
        if (!condition) {
          printWarning.apply(null, [format].concat(args));
        }
      };
    }
    var printWarning;
    module.exports = warning2;
  }
});

// node_modules/@atlaskit/tooltip/dist/esm/Tooltip.js
var import_react46 = __toESM(require_react());
var import_bind_event_listener3 = __toESM(require_dist());

// node_modules/@atlaskit/analytics-next/dist/esm/events/AnalyticsEvent.js
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source2 = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source2), true).forEach(function(key) {
      _defineProperty(target, key, source2[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys(Object(source2)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
    });
  }
  return target;
}
var AnalyticsEvent = function() {
  function AnalyticsEvent2(props) {
    var _this = this;
    _classCallCheck(this, AnalyticsEvent2);
    _defineProperty(this, "_isAnalyticsEvent", true);
    _defineProperty(this, "clone", function() {
      var payload = _objectSpread({}, _this.payload);
      return new AnalyticsEvent2({
        payload
      });
    });
    this.payload = props.payload;
  }
  _createClass(AnalyticsEvent2, [{
    key: "update",
    value: function update(updater) {
      if (typeof updater === "function") {
        this.payload = updater(this.payload);
      }
      if (_typeof(updater) === "object") {
        this.payload = _objectSpread(_objectSpread({}, this.payload), updater);
      }
      return this;
    }
  }]);
  return AnalyticsEvent2;
}();

// node_modules/@babel/runtime/helpers/esm/superPropBase.js
function _superPropBase(object, property) {
  while (!Object.prototype.hasOwnProperty.call(object, property)) {
    object = _getPrototypeOf(object);
    if (object === null)
      break;
  }
  return object;
}

// node_modules/@babel/runtime/helpers/esm/get.js
function _get() {
  if (typeof Reflect !== "undefined" && Reflect.get) {
    _get = Reflect.get.bind();
  } else {
    _get = function _get2(target, property, receiver) {
      var base = _superPropBase(target, property);
      if (!base)
        return;
      var desc = Object.getOwnPropertyDescriptor(base, property);
      if (desc.get) {
        return desc.get.call(arguments.length < 3 ? target : receiver);
      }
      return desc.value;
    };
  }
  return _get.apply(this, arguments);
}

// node_modules/@atlaskit/analytics-next/dist/esm/events/UIAnalyticsEvent.js
function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var UIAnalyticsEvent = function(_AnalyticsEvent) {
  _inherits(UIAnalyticsEvent2, _AnalyticsEvent);
  var _super = _createSuper(UIAnalyticsEvent2);
  function UIAnalyticsEvent2(props) {
    var _this;
    _classCallCheck(this, UIAnalyticsEvent2);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "_isUIAnalyticsEvent", true);
    _defineProperty(_assertThisInitialized(_this), "clone", function() {
      if (_this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot clone an event after it's been fired.");
        }
        return null;
      }
      var context = _toConsumableArray(_this.context);
      var handlers = _toConsumableArray(_this.handlers);
      var payload = JSON.parse(JSON.stringify(_this.payload));
      return new UIAnalyticsEvent2({
        context,
        handlers,
        payload
      });
    });
    _defineProperty(_assertThisInitialized(_this), "fire", function(channel) {
      if (_this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot fire an event twice.");
        }
        return;
      }
      _this.handlers.forEach(function(handler) {
        return handler(_assertThisInitialized(_this), channel);
      });
      _this.hasFired = true;
    });
    _this.context = props.context || [];
    _this.handlers = props.handlers || [];
    _this.hasFired = false;
    return _this;
  }
  _createClass(UIAnalyticsEvent2, [{
    key: "update",
    value: function update(updater) {
      if (this.hasFired) {
        if (!process.env.CI) {
          console.warn("Cannot update an event after it's been fired.");
        }
        return this;
      }
      return _get(_getPrototypeOf(UIAnalyticsEvent2.prototype), "update", this).call(this, updater);
    }
  }]);
  return UIAnalyticsEvent2;
}(AnalyticsEvent);

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/LegacyAnalyticsListener.js
var import_react2 = __toESM(require_react());
var import_prop_types = __toESM(require_prop_types());

// node_modules/@atlaskit/analytics-next-stable-react-context/dist/esm/context.js
var import_react = __toESM(require_react());
var AnalyticsNextContext = (0, import_react.createContext)({
  getAtlaskitAnalyticsContext: function() {
    return [];
  },
  getAtlaskitAnalyticsEventHandlers: function() {
    return [];
  }
});
var context_default = AnalyticsNextContext;

// node_modules/@atlaskit/analytics-next-stable-react-context/dist/esm/index.js
var esm_default = context_default;

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/LegacyAnalyticsListener.js
function _createSuper2(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct2();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct2() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ContextTypes = {
  getAtlaskitAnalyticsEventHandlers: import_prop_types.default.func,
  getAtlaskitAnalyticsContext: import_prop_types.default.func
};
var noop = function noop2() {
  return [];
};
var AnalyticsListener = function(_Component) {
  _inherits(AnalyticsListener4, _Component);
  var _super = _createSuper2(AnalyticsListener4);
  function AnalyticsListener4(props) {
    var _this;
    _classCallCheck(this, AnalyticsListener4);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "getChildContext", function() {
      return {
        getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers,
        getAtlaskitAnalyticsContext: _this.getAtlaskitAnalyticsContext
      };
    });
    _defineProperty(_assertThisInitialized(_this), "getAnalyticsEventHandlers", function() {
      var _this$props = _this.props, channel = _this$props.channel, onEvent = _this$props.onEvent;
      var _this$context$getAtla = _this.context.getAtlaskitAnalyticsEventHandlers, getAtlaskitAnalyticsEventHandlers = _this$context$getAtla === void 0 ? noop : _this$context$getAtla;
      var handler = function handler2(event, eventChannel) {
        if (channel === "*" || channel === eventChannel) {
          onEvent(event, eventChannel);
        }
      };
      return [handler].concat(_toConsumableArray(getAtlaskitAnalyticsEventHandlers()));
    });
    _defineProperty(_assertThisInitialized(_this), "getAtlaskitAnalyticsContext", function() {
      var _this$context$getAtla2 = _this.context.getAtlaskitAnalyticsContext, getAtlaskitAnalyticsContext = _this$context$getAtla2 === void 0 ? noop : _this$context$getAtla2;
      return getAtlaskitAnalyticsContext();
    });
    _this.contextValue = {
      getAtlaskitAnalyticsContext: _this.getAtlaskitAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers
    };
    return _this;
  }
  _createClass(AnalyticsListener4, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return import_react2.default.createElement(esm_default.Provider, {
        value: this.contextValue
      }, children);
    }
  }]);
  return AnalyticsListener4;
}(import_react2.Component);
_defineProperty(AnalyticsListener, "contextTypes", ContextTypes);
_defineProperty(AnalyticsListener, "childContextTypes", ContextTypes);
var LegacyAnalyticsListener_default = AnalyticsListener;

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/ModernAnalyticsListener.js
var import_react5 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useAnalyticsContext.js
var import_react3 = __toESM(require_react());
var useAnalyticsContext = function useAnalyticsContext2() {
  return (0, import_react3.useContext)(esm_default);
};

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useTrackedRef.js
var import_react4 = __toESM(require_react());
var useTrackedRef = function useTrackedRef2(value) {
  var ref = (0, import_react4.useRef)(value);
  (0, import_react4.useEffect)(function() {
    ref.current = value;
  }, [value]);
  return ref;
};

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/ModernAnalyticsListener.js
var AnalyticsListener2 = function AnalyticsListener3(_ref) {
  var children = _ref.children, channel = _ref.channel, onEvent = _ref.onEvent;
  var analyticsContext = useAnalyticsContext();
  var onEventRef = useTrackedRef(onEvent);
  var channelRef = useTrackedRef(channel);
  var getAtlaskitAnalyticsEventHandlers = (0, import_react5.useCallback)(function() {
    var thisHandler = function thisHandler2(event, eventChannel) {
      if (channelRef.current === "*" || channelRef.current === eventChannel) {
        onEventRef.current(event, eventChannel);
      }
    };
    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsEventHandlers()), [thisHandler]);
  }, [analyticsContext, channelRef, onEventRef]);
  var value = (0, import_react5.useMemo)(function() {
    return {
      getAtlaskitAnalyticsEventHandlers,
      getAtlaskitAnalyticsContext: analyticsContext.getAtlaskitAnalyticsContext
    };
  }, [analyticsContext, getAtlaskitAnalyticsEventHandlers]);
  return import_react5.default.createElement(esm_default.Provider, {
    value
  }, children);
};
var ModernAnalyticsListener_default = AnalyticsListener2;

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsListener/index.js
var _process$env;
var ExportedAnalyticsListener;
if (typeof process !== "undefined" && process !== null && (_process$env = process.env) !== null && _process$env !== void 0 && _process$env["ANALYTICS_NEXT_MODERN_CONTEXT"]) {
  ExportedAnalyticsListener = ModernAnalyticsListener_default;
} else {
  ExportedAnalyticsListener = LegacyAnalyticsListener_default;
}

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsContext/LegacyAnalyticsContext.js
var import_react6 = __toESM(require_react());
var import_prop_types2 = __toESM(require_prop_types());
function _createSuper3(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct3();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct3() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var ContextTypes2 = {
  getAtlaskitAnalyticsContext: import_prop_types2.default.func,
  getAtlaskitAnalyticsEventHandlers: import_prop_types2.default.func
};
var noop3 = function noop4() {
  return [];
};
var AnalyticsContext = function(_Component) {
  _inherits(AnalyticsContext4, _Component);
  var _super = _createSuper3(AnalyticsContext4);
  function AnalyticsContext4(props) {
    var _this;
    _classCallCheck(this, AnalyticsContext4);
    _this = _super.call(this, props);
    _defineProperty(_assertThisInitialized(_this), "getChildContext", function() {
      return {
        getAtlaskitAnalyticsContext: _this.getAnalyticsContext
      };
    });
    _defineProperty(_assertThisInitialized(_this), "getAnalyticsContext", function() {
      var data = _this.props.data;
      var _this$context$getAtla = _this.context.getAtlaskitAnalyticsContext, getAtlaskitAnalyticsContext = _this$context$getAtla === void 0 ? noop3 : _this$context$getAtla;
      return [].concat(_toConsumableArray(getAtlaskitAnalyticsContext()), [data]);
    });
    _defineProperty(_assertThisInitialized(_this), "getAnalyticsEventHandlers", function() {
      var _this$context$getAtla2 = _this.context.getAtlaskitAnalyticsEventHandlers, getAtlaskitAnalyticsEventHandlers = _this$context$getAtla2 === void 0 ? noop3 : _this$context$getAtla2;
      return getAtlaskitAnalyticsEventHandlers();
    });
    _this.contextValue = {
      getAtlaskitAnalyticsContext: _this.getAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: _this.getAnalyticsEventHandlers
    };
    return _this;
  }
  _createClass(AnalyticsContext4, [{
    key: "render",
    value: function render() {
      var children = this.props.children;
      return import_react6.default.createElement(esm_default.Provider, {
        value: this.contextValue
      }, children);
    }
  }]);
  return AnalyticsContext4;
}(import_react6.Component);
_defineProperty(AnalyticsContext, "contextTypes", ContextTypes2);
_defineProperty(AnalyticsContext, "childContextTypes", ContextTypes2);
var LegacyAnalyticsContext_default = AnalyticsContext;

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsContext/ModernAnalyticsContext.js
var import_react7 = __toESM(require_react());
var AnalyticsContext2 = function AnalyticsContext3(_ref) {
  var data = _ref.data, children = _ref.children;
  var dataRef = useTrackedRef(data);
  var analyticsContext = useAnalyticsContext();
  var getAtlaskitAnalyticsContext = (0, import_react7.useCallback)(function() {
    return [].concat(_toConsumableArray(analyticsContext.getAtlaskitAnalyticsContext()), [dataRef.current]);
  }, [analyticsContext, dataRef]);
  var value = (0, import_react7.useMemo)(function() {
    return {
      getAtlaskitAnalyticsContext,
      getAtlaskitAnalyticsEventHandlers: analyticsContext.getAtlaskitAnalyticsEventHandlers
    };
  }, [analyticsContext, getAtlaskitAnalyticsContext]);
  return import_react7.default.createElement(esm_default.Provider, {
    value
  }, children);
};
var ModernAnalyticsContext_default = AnalyticsContext2;

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsContext/index.js
var _process$env2;
var ExportedAnalyticsContext;
if (typeof process !== "undefined" && process !== null && (_process$env2 = process.env) !== null && _process$env2 !== void 0 && _process$env2["ANALYTICS_NEXT_MODERN_CONTEXT"]) {
  ExportedAnalyticsContext = ModernAnalyticsContext_default;
} else {
  ExportedAnalyticsContext = LegacyAnalyticsContext_default;
}

// node_modules/@atlaskit/analytics-next/dist/esm/hocs/withAnalyticsContext.js
var import_react8 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/components/AnalyticsErrorBoundary.js
var import_react9 = __toESM(require_react());
function _createSuper4(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct4();
  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived), result;
    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;
      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }
    return _possibleConstructorReturn(this, result);
  };
}
function _isNativeReflectConstruct4() {
  if (typeof Reflect === "undefined" || !Reflect.construct)
    return false;
  if (Reflect.construct.sham)
    return false;
  if (typeof Proxy === "function")
    return true;
  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
    return true;
  } catch (e) {
    return false;
  }
}
var AnalyticsErrorBoundary = function(_Component) {
  _inherits(AnalyticsErrorBoundary2, _Component);
  var _super = _createSuper4(AnalyticsErrorBoundary2);
  function AnalyticsErrorBoundary2(props) {
    var _this;
    _classCallCheck(this, AnalyticsErrorBoundary2);
    _this = _super.call(this, props);
    _this.state = {
      hasError: false
    };
    return _this;
  }
  _createClass(AnalyticsErrorBoundary2, [{
    key: "componentDidCatch",
    value: function componentDidCatch(error, info) {
      var onError = this.props.onError;
      onError && onError(error, info);
      this.setState({
        hasError: true
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props, data = _this$props.data, children = _this$props.children, ErrorComponent = _this$props.ErrorComponent;
      var hasError = this.state.hasError;
      if (hasError) {
        return ErrorComponent ? import_react9.default.createElement(LegacyAnalyticsContext_default, {
          data
        }, import_react9.default.createElement(ErrorComponent, null)) : null;
      }
      return import_react9.default.createElement(LegacyAnalyticsContext_default, {
        data
      }, children);
    }
  }]);
  return AnalyticsErrorBoundary2;
}(import_react9.Component);

// node_modules/@atlaskit/analytics-next/dist/esm/hocs/withAnalyticsEvents.js
var import_react12 = __toESM(require_react());

// node_modules/use-memo-one/dist/use-memo-one.esm.js
var import_react10 = __toESM(require_react());
function areInputsEqual(newInputs, lastInputs) {
  if (newInputs.length !== lastInputs.length) {
    return false;
  }
  for (var i = 0; i < newInputs.length; i++) {
    if (newInputs[i] !== lastInputs[i]) {
      return false;
    }
  }
  return true;
}
function useMemoOne(getResult, inputs) {
  var initial = (0, import_react10.useState)(function() {
    return {
      inputs,
      result: getResult()
    };
  })[0];
  var isFirstRun = (0, import_react10.useRef)(true);
  var committed = (0, import_react10.useRef)(initial);
  var useCache = isFirstRun.current || Boolean(inputs && committed.current.inputs && areInputsEqual(inputs, committed.current.inputs));
  var cache = useCache ? committed.current : {
    inputs,
    result: getResult()
  };
  (0, import_react10.useEffect)(function() {
    isFirstRun.current = false;
    committed.current = cache;
  }, [cache]);
  return cache.result;
}
function useCallbackOne(callback, inputs) {
  return useMemoOne(function() {
    return callback;
  }, inputs);
}

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useAnalyticsEvents.js
function useAnalyticsEvents() {
  var analyticsContext = useAnalyticsContext();
  var createAnalyticsEvent = useCallbackOne(function(payload) {
    return new UIAnalyticsEvent({
      context: analyticsContext.getAtlaskitAnalyticsContext(),
      handlers: analyticsContext.getAtlaskitAnalyticsEventHandlers(),
      payload
    });
  }, [analyticsContext]);
  return {
    createAnalyticsEvent
  };
}

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePatchedProps.js
var import_react11 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/useCallbackWithAnalytics.js
var import_react13 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafEventHandler.js
var import_react14 = __toESM(require_react());

// node_modules/@atlaskit/analytics-next/dist/esm/hooks/usePlatformLeafSyntheticEventHandler.js
var import_react15 = __toESM(require_react());
function ownKeys2(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source2 = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys2(Object(source2), true).forEach(function(key) {
      _defineProperty(target, key, source2[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source2)) : ownKeys2(Object(source2)).forEach(function(key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source2, key));
    });
  }
  return target;
}
function usePlatformLeafSyntheticEventHandler(_ref) {
  var fn2 = _ref.fn, action = _ref.action, componentName = _ref.componentName, packageName = _ref.packageName, packageVersion = _ref.packageVersion, analyticsData = _ref.analyticsData;
  var _useAnalyticsEvents = useAnalyticsEvents(), createAnalyticsEvent = _useAnalyticsEvents.createAnalyticsEvent;
  var dataRef = useTrackedRef(analyticsData);
  var fnRef = useTrackedRef(fn2);
  var handler = (0, import_react15.useCallback)(function() {
    var analyticsEvent = createAnalyticsEvent({
      action,
      actionSubject: componentName,
      attributes: {
        componentName,
        packageName,
        packageVersion
      }
    });
    var context = _objectSpread2({
      componentName,
      packageName,
      packageVersion
    }, dataRef.current);
    analyticsEvent.context.push(context);
    var clone = analyticsEvent.clone();
    if (clone) {
      clone.fire("atlaskit");
    }
    fnRef.current(analyticsEvent);
  }, [
    // These are strings and won't change
    action,
    componentName,
    packageName,
    packageVersion,
    // This function is memoized in the context
    createAnalyticsEvent,
    // these are a stable ref because of the useTrackedRef hook
    dataRef,
    fnRef
  ]);
  return handler;
}

// node_modules/@atlaskit/ds-lib/dist/esm/utils/noop.js
function noop5() {
}

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-close-on-escape-press.js
var import_react16 = __toESM(require_react());
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/ds-lib/dist/esm/utils/keycodes.js
var ESCAPE = "Escape";

// node_modules/@atlaskit/ds-lib/dist/esm/hooks/use-close-on-escape-press.js
function useCloseOnEscapePress(_ref) {
  var onClose = _ref.onClose, isDisabled = _ref.isDisabled;
  var escapePressed = (0, import_react16.useRef)(false);
  var onKeyDown = (0, import_react16.useCallback)(function(e) {
    if (isDisabled || escapePressed.current || e.key !== ESCAPE) {
      return;
    }
    escapePressed.current = true;
    onClose(e);
  }, [onClose, isDisabled]);
  var onKeyUp = (0, import_react16.useCallback)(function() {
    escapePressed.current = false;
  }, []);
  (0, import_react16.useEffect)(function() {
    return (0, import_bind_event_listener.bindAll)(document, [{
      type: "keydown",
      listener: onKeyDown
    }, {
      type: "keyup",
      listener: onKeyUp
    }], {
      capture: false
    });
  }, [onKeyDown, onKeyUp]);
}

// node_modules/@atlaskit/motion/dist/esm/utils/durations.js
var durationStep = 25;
var smallDurationMs = durationStep * 4;
var mediumDurationMs = durationStep * 14;
var largeDurationMs = durationStep * 28;

// node_modules/@atlaskit/motion/dist/esm/utils/curves.js
var easeInOut = "cubic-bezier(0.15,1,0.3,1)";

// node_modules/@atlaskit/motion/dist/esm/utils/accessibility.js
var import_react17 = __toESM(require_react());
var import_bind_event_listener2 = __toESM(require_dist());
var isMatchMediaAvailable = function isMatchMediaAvailable2() {
  return typeof window !== "undefined" && "matchMedia" in window;
};
var isReducedMotion = function isReducedMotion2() {
  if (!isMatchMediaAvailable()) {
    return false;
  }
  var _window$matchMedia = window.matchMedia("(prefers-reduced-motion: reduce)"), matches = _window$matchMedia.matches;
  return matches;
};
var reduceMotionAsPerUserPreference = {
  "@media (prefers-reduced-motion: reduce)": {
    animation: "none",
    transition: "none"
  }
};

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
var import_react26 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
var import_react24 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/timer-hooks.js
var import_react18 = __toESM(require_react());
var getHookDeps = function getHookDeps2(opts) {
  switch (opts.cleanup) {
    case "next-effect":
      return void 0;
    case "unmount":
    default:
      return [];
  }
};
var useSetTimeout = function useSetTimeout2() {
  var opts = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {
    cleanup: "unmount"
  };
  var timeouts = (0, import_react18.useRef)([]);
  (0, import_react18.useEffect)(function() {
    return function() {
      if (timeouts.current.length) {
        timeouts.current.forEach(function(id) {
          return clearTimeout(id);
        });
        timeouts.current = [];
      }
    };
  }, getHookDeps(opts));
  return (0, import_react18.useCallback)(function(handler, timeout) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    var id = setTimeout.apply(void 0, [function() {
      timeouts.current = timeouts.current.filter(function(timeoutId) {
        return timeoutId !== id;
      });
      handler();
    }, timeout].concat(args));
    timeouts.current.push(id);
  }, []);
};

// node_modules/@atlaskit/motion/dist/esm/entering/exiting-persistence.js
var import_react20 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-force-render.js
var import_react19 = __toESM(require_react());
var useForceRender = function useForceRender2() {
  var _useState = (0, import_react19.useState)({}), _useState2 = _slicedToArray(_useState, 2), updateState = _useState2[1];
  var forceRender = (0, import_react19.useCallback)(function() {
    return updateState({});
  }, []);
  return forceRender;
};

// node_modules/@atlaskit/motion/dist/esm/entering/exiting-persistence.js
var emptyContext = {
  // Motions will always appear if not inside a exiting persistence component.
  appear: true,
  isExiting: false
};
var ExitingContext = (0, import_react20.createContext)(emptyContext);
var isAnyPreviousKeysMissingFromCurrent = function isAnyPreviousKeysMissingFromCurrent2(currentMap, previous) {
  for (var i = 0; i < previous.length; i++) {
    var element = previous[i];
    var _key = element.key;
    if (!currentMap[_key]) {
      return true;
    }
  }
  return false;
};
var wrapChildWithContextProvider = function wrapChildWithContextProvider2(child) {
  var value = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : emptyContext;
  return import_react20.default.createElement(ExitingContext.Provider, {
    key: "".concat(child.key, "-provider"),
    value
  }, child);
};
var childrenToObj = function childrenToObj2(children) {
  return children.reduce(function(acc, child) {
    acc[child.key] = child;
    return acc;
  }, {});
};
var spliceNewElementsIntoPrevious = function spliceNewElementsIntoPrevious2(current, previous) {
  var splicedChildren = previous.concat([]);
  var previousMap = childrenToObj(previous);
  for (var i = 0; i < current.length; i++) {
    var child = current[i];
    var childIsNew = !previousMap[child.key];
    if (childIsNew) {
      splicedChildren.splice(i + 1, 0, child);
    }
  }
  return splicedChildren;
};
var childrenToArray = function childrenToArray2(children) {
  var childrenAsArray = [];
  import_react20.Children.toArray(children).forEach(function(child) {
    if (typeof child !== "boolean" && Boolean(child)) {
      childrenAsArray.push(child);
    }
  });
  return childrenAsArray;
};
var hasAnyExitingChildMountedAgain = function hasAnyExitingChildMountedAgain2(exitingChildren, children) {
  var exitingChildMountedAgain = false;
  children.forEach(function(child) {
    if (exitingChildren.current[child.key]) {
      exitingChildMountedAgain = true;
      delete exitingChildren.current[child.key];
    }
  });
  return exitingChildMountedAgain;
};
var ExitingPersistence = (0, import_react20.memo)(function(_ref) {
  var _ref$appear = _ref.appear, appearFromProp = _ref$appear === void 0 ? false : _ref$appear, childs = _ref.children, exitThenEnter = _ref.exitThenEnter;
  var children = childrenToArray(childs);
  var childrenObj = childrenToObj(children);
  var previousChildren = (0, import_react20.useRef)([]);
  var persistedChildren = (0, import_react20.useRef)([]);
  var forceRender = useForceRender();
  var exitingChildren = (0, import_react20.useRef)({});
  var appear = (0, import_react20.useRef)(appearFromProp);
  var defaultContextValue = (0, import_react20.useMemo)(
    function() {
      return {
        appear: appear.current,
        isExiting: false
      };
    },
    // React rules of hooks says this isn't needed because mutating appear won't cause a re-render.
    // While technically true - it will trigger this to make a new object on the _next_ render which is what we want.
    // Remove this or use appear instead of appear.current and you will notice a test breaks.
    // eslint-disable-next-line react-hooks/exhaustive-deps
    [appear.current]
  );
  if (isReducedMotion()) {
    return children;
  }
  if (!appear.current) {
    appear.current = true;
  }
  if (previousChildren.current.length && isAnyPreviousKeysMissingFromCurrent(childrenObj, previousChildren.current)) {
    if (persistedChildren.current.length === 0 || hasAnyExitingChildMountedAgain(exitingChildren, children)) {
      persistedChildren.current = previousChildren.current;
    }
    previousChildren.current = children;
    return (exitThenEnter ? persistedChildren.current : spliceNewElementsIntoPrevious(children, persistedChildren.current)).map(function(child) {
      var currentChild = childrenObj[child.key];
      if (!currentChild) {
        exitingChildren.current[child.key] = true;
        return wrapChildWithContextProvider(child, {
          isExiting: true,
          appear: true,
          onFinish: function onFinish() {
            delete exitingChildren.current[child.key];
            if (Object.keys(exitingChildren.current).length === 0) {
              previousChildren.current = [];
              persistedChildren.current = [];
              forceRender();
            }
          }
        });
      }
      return wrapChildWithContextProvider(currentChild, defaultContextValue);
    });
  } else {
    previousChildren.current = children;
  }
  return children.map(function(child) {
    return wrapChildWithContextProvider(child, defaultContextValue);
  });
});
var useExitingPersistence = function useExitingPersistence2() {
  return (0, import_react20.useContext)(ExitingContext);
};
ExitingPersistence.displayName = "ExitingPersistence";
var exiting_persistence_default = ExitingPersistence;

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
var import_react23 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-layout-effect.js
var import_react21 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-unique-id.js
var import_react22 = __toESM(require_react());
function useUniqueId() {
  var identifier = (0, import_react22.useRef)("");
  if (!identifier.current) {
    identifier.current = "_" + (Number(String(Math.random()).slice(2)) + Date.now() + Math.round(performance.now())).toString(36);
  }
  return identifier.current;
}

// node_modules/@atlaskit/motion/dist/esm/entering/staggered-entrance.js
var StaggeredEntranceContext = (0, import_react23.createContext)(function() {
  return {
    isReady: true,
    delay: 0,
    ref: noop5
  };
});
var useStaggeredEntrance = function useStaggeredEntrance2() {
  var indentifier = useUniqueId();
  var context = (0, import_react23.useContext)(StaggeredEntranceContext);
  return context(indentifier);
};

// node_modules/@atlaskit/motion/dist/esm/entering/keyframes-motion.js
function ownKeys3(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread3(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys3(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var EXITING_MOTION_MULTIPLIER = 0.5;
var EnteringMotion = function EnteringMotion2(_ref) {
  var children = _ref.children, animationTimingFunction = _ref.animationTimingFunction, enteringAnimation = _ref.enteringAnimation, exitingAnimation = _ref.exitingAnimation, isPaused = _ref.isPaused, onFinishMotion = _ref.onFinish, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration;
  var staggered = useStaggeredEntrance();
  var _useExitingPersistenc = useExitingPersistence(), isExiting = _useExitingPersistenc.isExiting, onExitFinished = _useExitingPersistenc.onFinish, appear = _useExitingPersistenc.appear;
  var setTimeout2 = useSetTimeout();
  var paused = isPaused || !staggered.isReady;
  var delay = isExiting ? 0 : staggered.delay;
  var state = isExiting ? "exiting" : "entering";
  var _useState = (0, import_react24.useState)(appear), _useState2 = _slicedToArray(_useState, 2), hasAnimationStyles = _useState2[0], setHasAnimationStyles = _useState2[1];
  (0, import_react24.useEffect)(function() {
    var isCancelled = false;
    if (paused) {
      return;
    }
    if (!appear) {
      onFinishMotion && onFinishMotion(state);
      return;
    }
    setHasAnimationStyles(true);
    setTimeout2(function() {
      if (state === "exiting") {
        onExitFinished && onExitFinished();
      }
      if (!isCancelled) {
        setHasAnimationStyles(false);
      }
      onFinishMotion && onFinishMotion(state);
    }, isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration + delay);
    return function() {
      isCancelled = true;
    };
  }, [onExitFinished, state, isExiting, duration, delay, paused, setTimeout2]);
  return import_react24.default.createElement(ClassNames, null, function(_ref2) {
    var css2 = _ref2.css;
    return children({
      ref: staggered.ref,
      className: hasAnimationStyles ? css2(_objectSpread3(_objectSpread3({}, reduceMotionAsPerUserPreference), {}, {
        animationDelay: "".concat(delay, "ms"),
        animationDuration: "".concat(isExiting ? duration * EXITING_MOTION_MULTIPLIER : duration, "ms"),
        animationFillMode: isExiting ? "forwards" : "backwards",
        animationName: "".concat(keyframes(isExiting ? exitingAnimation || enteringAnimation : enteringAnimation)),
        animationPlayState: paused ? "paused" : "running",
        animationTimingFunction: animationTimingFunction(state)
      })) : ""
    }, state);
  });
};
var keyframes_motion_default = EnteringMotion;

// node_modules/@atlaskit/motion/dist/esm/entering/fade-in.js
function ownKeys4(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread4(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys4(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var directionMotions = {
  proportional: {
    bottom: "translate3d(0, calc(5% + 4px), 0)",
    left: "translate3d(calc(-5% - 4px), 0, 0)",
    right: "translate3d(calc(5% + 4px), 0, 0)",
    top: "translate3d(0, calc(-5% - 4px), 0)"
  },
  constant: {
    bottom: "translate3d(0, 4px, 0)",
    left: "translate3d(-4px, 0, 0)",
    right: "translate3d(4px, 0, 0)",
    top: "translate3d(0, -4px, 0)"
  }
};
var invertedDirection = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var fadeInAnimation = function fadeInAnimation2(direction) {
  var distance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "proportional";
  return {
    from: _objectSpread4({
      opacity: 0
    }, direction !== void 0 && {
      transform: directionMotions[distance][direction]
    }),
    "50%": {
      opacity: 1
    },
    to: {
      transform: direction !== void 0 ? "none" : void 0
    }
  };
};
var fadeOutAnimation = function fadeOutAnimation2(direction) {
  var distance = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "proportional";
  return {
    from: {
      opacity: 1,
      transform: direction !== void 0 ? "translate3d(0, 0, 0)" : void 0
    },
    to: _objectSpread4({
      opacity: 0
    }, direction !== void 0 && {
      transform: directionMotions[distance][direction]
    })
  };
};
var FadeIn = function FadeIn2(_ref) {
  var children = _ref.children, _ref$duration = _ref.duration, duration = _ref$duration === void 0 ? largeDurationMs : _ref$duration, entranceDirection = _ref.entranceDirection, exitDirection = _ref.exitDirection, _ref$distance = _ref.distance, distance = _ref$distance === void 0 ? "proportional" : _ref$distance, onFinish = _ref.onFinish, isPaused = _ref.isPaused;
  var invertedEntranceDirection = entranceDirection && invertedDirection[entranceDirection];
  return import_react26.default.createElement(keyframes_motion_default, {
    duration,
    enteringAnimation: fadeInAnimation(entranceDirection, distance),
    exitingAnimation: fadeOutAnimation(exitDirection || invertedEntranceDirection, distance),
    animationTimingFunction: function animationTimingFunction() {
      return easeInOut;
    },
    onFinish,
    isPaused
  }, children);
};
var fade_in_default = FadeIn;

// node_modules/@atlaskit/motion/dist/esm/resizing/height.js
var import_react29 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-element-ref.js
var import_react27 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/utils/use-snapshot-before-update.js
var import_react28 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/zoom-in.js
var import_react30 = __toESM(require_react());

// node_modules/@atlaskit/motion/dist/esm/entering/slide-in.js
var import_react31 = __toESM(require_react());

// node_modules/@atlaskit/popper/dist/esm/popper.js
var import_react32 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Popper.js
var React18 = __toESM(require_react());

// node_modules/react-popper/lib/esm/Manager.js
var React15 = __toESM(require_react());
var ManagerReferenceNodeContext = React15.createContext();
var ManagerReferenceNodeSetterContext = React15.createContext();

// node_modules/react-popper/lib/esm/utils.js
var React16 = __toESM(require_react());
var unwrapArray = function unwrapArray2(arg) {
  return Array.isArray(arg) ? arg[0] : arg;
};
var safeInvoke = function safeInvoke2(fn2) {
  if (typeof fn2 === "function") {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return fn2.apply(void 0, args);
  }
};
var setRef = function setRef2(ref, node) {
  if (typeof ref === "function") {
    return safeInvoke(ref, node);
  } else if (ref != null) {
    ref.current = node;
  }
};
var fromEntries = function fromEntries2(entries) {
  return entries.reduce(function(acc, _ref) {
    var key = _ref[0], value = _ref[1];
    acc[key] = value;
    return acc;
  }, {});
};
var useIsomorphicLayoutEffect = typeof window !== "undefined" && window.document && window.document.createElement ? React16.useLayoutEffect : React16.useEffect;

// node_modules/react-popper/lib/esm/usePopper.js
var React17 = __toESM(require_react());
var ReactDOM = __toESM(require_react_dom());

// node_modules/@popperjs/core/lib/enums.js
var top = "top";
var bottom = "bottom";
var right = "right";
var left = "left";
var auto = "auto";
var basePlacements = [top, bottom, right, left];
var start = "start";
var end = "end";
var clippingParents = "clippingParents";
var viewport = "viewport";
var popper = "popper";
var reference = "reference";
var variationPlacements = basePlacements.reduce(function(acc, placement) {
  return acc.concat([placement + "-" + start, placement + "-" + end]);
}, []);
var placements = [].concat(basePlacements, [auto]).reduce(function(acc, placement) {
  return acc.concat([placement, placement + "-" + start, placement + "-" + end]);
}, []);
var beforeRead = "beforeRead";
var read = "read";
var afterRead = "afterRead";
var beforeMain = "beforeMain";
var main = "main";
var afterMain = "afterMain";
var beforeWrite = "beforeWrite";
var write = "write";
var afterWrite = "afterWrite";
var modifierPhases = [beforeRead, read, afterRead, beforeMain, main, afterMain, beforeWrite, write, afterWrite];

// node_modules/@popperjs/core/lib/dom-utils/getNodeName.js
function getNodeName(element) {
  return element ? (element.nodeName || "").toLowerCase() : null;
}

// node_modules/@popperjs/core/lib/dom-utils/getWindow.js
function getWindow(node) {
  if (node == null) {
    return window;
  }
  if (node.toString() !== "[object Window]") {
    var ownerDocument = node.ownerDocument;
    return ownerDocument ? ownerDocument.defaultView || window : window;
  }
  return node;
}

// node_modules/@popperjs/core/lib/dom-utils/instanceOf.js
function isElement(node) {
  var OwnElement = getWindow(node).Element;
  return node instanceof OwnElement || node instanceof Element;
}
function isHTMLElement(node) {
  var OwnElement = getWindow(node).HTMLElement;
  return node instanceof OwnElement || node instanceof HTMLElement;
}
function isShadowRoot(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  var OwnElement = getWindow(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}

// node_modules/@popperjs/core/lib/modifiers/applyStyles.js
function applyStyles(_ref) {
  var state = _ref.state;
  Object.keys(state.elements).forEach(function(name) {
    var style = state.styles[name] || {};
    var attributes = state.attributes[name] || {};
    var element = state.elements[name];
    if (!isHTMLElement(element) || !getNodeName(element)) {
      return;
    }
    Object.assign(element.style, style);
    Object.keys(attributes).forEach(function(name2) {
      var value = attributes[name2];
      if (value === false) {
        element.removeAttribute(name2);
      } else {
        element.setAttribute(name2, value === true ? "" : value);
      }
    });
  });
}
function effect(_ref2) {
  var state = _ref2.state;
  var initialStyles = {
    popper: {
      position: state.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  Object.assign(state.elements.popper.style, initialStyles.popper);
  state.styles = initialStyles;
  if (state.elements.arrow) {
    Object.assign(state.elements.arrow.style, initialStyles.arrow);
  }
  return function() {
    Object.keys(state.elements).forEach(function(name) {
      var element = state.elements[name];
      var attributes = state.attributes[name] || {};
      var styleProperties = Object.keys(state.styles.hasOwnProperty(name) ? state.styles[name] : initialStyles[name]);
      var style = styleProperties.reduce(function(style2, property) {
        style2[property] = "";
        return style2;
      }, {});
      if (!isHTMLElement(element) || !getNodeName(element)) {
        return;
      }
      Object.assign(element.style, style);
      Object.keys(attributes).forEach(function(attribute) {
        element.removeAttribute(attribute);
      });
    });
  };
}
var applyStyles_default = {
  name: "applyStyles",
  enabled: true,
  phase: "write",
  fn: applyStyles,
  effect,
  requires: ["computeStyles"]
};

// node_modules/@popperjs/core/lib/utils/getBasePlacement.js
function getBasePlacement(placement) {
  return placement.split("-")[0];
}

// node_modules/@popperjs/core/lib/utils/math.js
var max = Math.max;
var min = Math.min;
var round = Math.round;

// node_modules/@popperjs/core/lib/utils/userAgent.js
function getUAString() {
  var uaData = navigator.userAgentData;
  if (uaData != null && uaData.brands && Array.isArray(uaData.brands)) {
    return uaData.brands.map(function(item) {
      return item.brand + "/" + item.version;
    }).join(" ");
  }
  return navigator.userAgent;
}

// node_modules/@popperjs/core/lib/dom-utils/isLayoutViewport.js
function isLayoutViewport() {
  return !/^((?!chrome|android).)*safari/i.test(getUAString());
}

// node_modules/@popperjs/core/lib/dom-utils/getBoundingClientRect.js
function getBoundingClientRect(element, includeScale, isFixedStrategy) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  var clientRect = element.getBoundingClientRect();
  var scaleX = 1;
  var scaleY = 1;
  if (includeScale && isHTMLElement(element)) {
    scaleX = element.offsetWidth > 0 ? round(clientRect.width) / element.offsetWidth || 1 : 1;
    scaleY = element.offsetHeight > 0 ? round(clientRect.height) / element.offsetHeight || 1 : 1;
  }
  var _ref = isElement(element) ? getWindow(element) : window, visualViewport = _ref.visualViewport;
  var addVisualOffsets = !isLayoutViewport() && isFixedStrategy;
  var x = (clientRect.left + (addVisualOffsets && visualViewport ? visualViewport.offsetLeft : 0)) / scaleX;
  var y = (clientRect.top + (addVisualOffsets && visualViewport ? visualViewport.offsetTop : 0)) / scaleY;
  var width = clientRect.width / scaleX;
  var height = clientRect.height / scaleY;
  return {
    width,
    height,
    top: y,
    right: x + width,
    bottom: y + height,
    left: x,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getLayoutRect.js
function getLayoutRect(element) {
  var clientRect = getBoundingClientRect(element);
  var width = element.offsetWidth;
  var height = element.offsetHeight;
  if (Math.abs(clientRect.width - width) <= 1) {
    width = clientRect.width;
  }
  if (Math.abs(clientRect.height - height) <= 1) {
    height = clientRect.height;
  }
  return {
    x: element.offsetLeft,
    y: element.offsetTop,
    width,
    height
  };
}

// node_modules/@popperjs/core/lib/dom-utils/contains.js
function contains(parent, child) {
  var rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot(rootNode)) {
    var next = child;
    do {
      if (next && parent.isSameNode(next)) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}

// node_modules/@popperjs/core/lib/dom-utils/getComputedStyle.js
function getComputedStyle(element) {
  return getWindow(element).getComputedStyle(element);
}

// node_modules/@popperjs/core/lib/dom-utils/isTableElement.js
function isTableElement(element) {
  return ["table", "td", "th"].indexOf(getNodeName(element)) >= 0;
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentElement.js
function getDocumentElement(element) {
  return ((isElement(element) ? element.ownerDocument : (
    // $FlowFixMe[prop-missing]
    element.document
  )) || window.document).documentElement;
}

// node_modules/@popperjs/core/lib/dom-utils/getParentNode.js
function getParentNode(element) {
  if (getNodeName(element) === "html") {
    return element;
  }
  return (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    element.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    element.parentNode || // DOM Element detected
    (isShadowRoot(element) ? element.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    getDocumentElement(element)
  );
}

// node_modules/@popperjs/core/lib/dom-utils/getOffsetParent.js
function getTrueOffsetParent(element) {
  if (!isHTMLElement(element) || // https://github.com/popperjs/popper-core/issues/837
  getComputedStyle(element).position === "fixed") {
    return null;
  }
  return element.offsetParent;
}
function getContainingBlock(element) {
  var isFirefox = /firefox/i.test(getUAString());
  var isIE = /Trident/i.test(getUAString());
  if (isIE && isHTMLElement(element)) {
    var elementCss = getComputedStyle(element);
    if (elementCss.position === "fixed") {
      return null;
    }
  }
  var currentNode = getParentNode(element);
  if (isShadowRoot(currentNode)) {
    currentNode = currentNode.host;
  }
  while (isHTMLElement(currentNode) && ["html", "body"].indexOf(getNodeName(currentNode)) < 0) {
    var css2 = getComputedStyle(currentNode);
    if (css2.transform !== "none" || css2.perspective !== "none" || css2.contain === "paint" || ["transform", "perspective"].indexOf(css2.willChange) !== -1 || isFirefox && css2.willChange === "filter" || isFirefox && css2.filter && css2.filter !== "none") {
      return currentNode;
    } else {
      currentNode = currentNode.parentNode;
    }
  }
  return null;
}
function getOffsetParent(element) {
  var window2 = getWindow(element);
  var offsetParent = getTrueOffsetParent(element);
  while (offsetParent && isTableElement(offsetParent) && getComputedStyle(offsetParent).position === "static") {
    offsetParent = getTrueOffsetParent(offsetParent);
  }
  if (offsetParent && (getNodeName(offsetParent) === "html" || getNodeName(offsetParent) === "body" && getComputedStyle(offsetParent).position === "static")) {
    return window2;
  }
  return offsetParent || getContainingBlock(element) || window2;
}

// node_modules/@popperjs/core/lib/utils/getMainAxisFromPlacement.js
function getMainAxisFromPlacement(placement) {
  return ["top", "bottom"].indexOf(placement) >= 0 ? "x" : "y";
}

// node_modules/@popperjs/core/lib/utils/within.js
function within(min2, value, max2) {
  return max(min2, min(value, max2));
}
function withinMaxClamp(min2, value, max2) {
  var v = within(min2, value, max2);
  return v > max2 ? max2 : v;
}

// node_modules/@popperjs/core/lib/utils/getFreshSideObject.js
function getFreshSideObject() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}

// node_modules/@popperjs/core/lib/utils/mergePaddingObject.js
function mergePaddingObject(paddingObject) {
  return Object.assign({}, getFreshSideObject(), paddingObject);
}

// node_modules/@popperjs/core/lib/utils/expandToHashMap.js
function expandToHashMap(value, keys) {
  return keys.reduce(function(hashMap, key) {
    hashMap[key] = value;
    return hashMap;
  }, {});
}

// node_modules/@popperjs/core/lib/modifiers/arrow.js
var toPaddingObject = function toPaddingObject2(padding, state) {
  padding = typeof padding === "function" ? padding(Object.assign({}, state.rects, {
    placement: state.placement
  })) : padding;
  return mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
};
function arrow(_ref) {
  var _state$modifiersData$;
  var state = _ref.state, name = _ref.name, options = _ref.options;
  var arrowElement = state.elements.arrow;
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var basePlacement = getBasePlacement(state.placement);
  var axis = getMainAxisFromPlacement(basePlacement);
  var isVertical = [left, right].indexOf(basePlacement) >= 0;
  var len = isVertical ? "height" : "width";
  if (!arrowElement || !popperOffsets2) {
    return;
  }
  var paddingObject = toPaddingObject(options.padding, state);
  var arrowRect = getLayoutRect(arrowElement);
  var minProp = axis === "y" ? top : left;
  var maxProp = axis === "y" ? bottom : right;
  var endDiff = state.rects.reference[len] + state.rects.reference[axis] - popperOffsets2[axis] - state.rects.popper[len];
  var startDiff = popperOffsets2[axis] - state.rects.reference[axis];
  var arrowOffsetParent = getOffsetParent(arrowElement);
  var clientSize = arrowOffsetParent ? axis === "y" ? arrowOffsetParent.clientHeight || 0 : arrowOffsetParent.clientWidth || 0 : 0;
  var centerToReference = endDiff / 2 - startDiff / 2;
  var min2 = paddingObject[minProp];
  var max2 = clientSize - arrowRect[len] - paddingObject[maxProp];
  var center = clientSize / 2 - arrowRect[len] / 2 + centerToReference;
  var offset2 = within(min2, center, max2);
  var axisProp = axis;
  state.modifiersData[name] = (_state$modifiersData$ = {}, _state$modifiersData$[axisProp] = offset2, _state$modifiersData$.centerOffset = offset2 - center, _state$modifiersData$);
}
function effect2(_ref2) {
  var state = _ref2.state, options = _ref2.options;
  var _options$element = options.element, arrowElement = _options$element === void 0 ? "[data-popper-arrow]" : _options$element;
  if (arrowElement == null) {
    return;
  }
  if (typeof arrowElement === "string") {
    arrowElement = state.elements.popper.querySelector(arrowElement);
    if (!arrowElement) {
      return;
    }
  }
  if (!contains(state.elements.popper, arrowElement)) {
    return;
  }
  state.elements.arrow = arrowElement;
}
var arrow_default = {
  name: "arrow",
  enabled: true,
  phase: "main",
  fn: arrow,
  effect: effect2,
  requires: ["popperOffsets"],
  requiresIfExists: ["preventOverflow"]
};

// node_modules/@popperjs/core/lib/utils/getVariation.js
function getVariation(placement) {
  return placement.split("-")[1];
}

// node_modules/@popperjs/core/lib/modifiers/computeStyles.js
var unsetSides = {
  top: "auto",
  right: "auto",
  bottom: "auto",
  left: "auto"
};
function roundOffsetsByDPR(_ref, win) {
  var x = _ref.x, y = _ref.y;
  var dpr = win.devicePixelRatio || 1;
  return {
    x: round(x * dpr) / dpr || 0,
    y: round(y * dpr) / dpr || 0
  };
}
function mapToStyles(_ref2) {
  var _Object$assign2;
  var popper2 = _ref2.popper, popperRect = _ref2.popperRect, placement = _ref2.placement, variation = _ref2.variation, offsets = _ref2.offsets, position = _ref2.position, gpuAcceleration = _ref2.gpuAcceleration, adaptive = _ref2.adaptive, roundOffsets = _ref2.roundOffsets, isFixed = _ref2.isFixed;
  var _offsets$x = offsets.x, x = _offsets$x === void 0 ? 0 : _offsets$x, _offsets$y = offsets.y, y = _offsets$y === void 0 ? 0 : _offsets$y;
  var _ref3 = typeof roundOffsets === "function" ? roundOffsets({
    x,
    y
  }) : {
    x,
    y
  };
  x = _ref3.x;
  y = _ref3.y;
  var hasX = offsets.hasOwnProperty("x");
  var hasY = offsets.hasOwnProperty("y");
  var sideX = left;
  var sideY = top;
  var win = window;
  if (adaptive) {
    var offsetParent = getOffsetParent(popper2);
    var heightProp = "clientHeight";
    var widthProp = "clientWidth";
    if (offsetParent === getWindow(popper2)) {
      offsetParent = getDocumentElement(popper2);
      if (getComputedStyle(offsetParent).position !== "static" && position === "absolute") {
        heightProp = "scrollHeight";
        widthProp = "scrollWidth";
      }
    }
    offsetParent = offsetParent;
    if (placement === top || (placement === left || placement === right) && variation === end) {
      sideY = bottom;
      var offsetY = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        offsetParent[heightProp]
      );
      y -= offsetY - popperRect.height;
      y *= gpuAcceleration ? 1 : -1;
    }
    if (placement === left || (placement === top || placement === bottom) && variation === end) {
      sideX = right;
      var offsetX = isFixed && offsetParent === win && win.visualViewport ? win.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        offsetParent[widthProp]
      );
      x -= offsetX - popperRect.width;
      x *= gpuAcceleration ? 1 : -1;
    }
  }
  var commonStyles = Object.assign({
    position
  }, adaptive && unsetSides);
  var _ref4 = roundOffsets === true ? roundOffsetsByDPR({
    x,
    y
  }, getWindow(popper2)) : {
    x,
    y
  };
  x = _ref4.x;
  y = _ref4.y;
  if (gpuAcceleration) {
    var _Object$assign;
    return Object.assign({}, commonStyles, (_Object$assign = {}, _Object$assign[sideY] = hasY ? "0" : "", _Object$assign[sideX] = hasX ? "0" : "", _Object$assign.transform = (win.devicePixelRatio || 1) <= 1 ? "translate(" + x + "px, " + y + "px)" : "translate3d(" + x + "px, " + y + "px, 0)", _Object$assign));
  }
  return Object.assign({}, commonStyles, (_Object$assign2 = {}, _Object$assign2[sideY] = hasY ? y + "px" : "", _Object$assign2[sideX] = hasX ? x + "px" : "", _Object$assign2.transform = "", _Object$assign2));
}
function computeStyles(_ref5) {
  var state = _ref5.state, options = _ref5.options;
  var _options$gpuAccelerat = options.gpuAcceleration, gpuAcceleration = _options$gpuAccelerat === void 0 ? true : _options$gpuAccelerat, _options$adaptive = options.adaptive, adaptive = _options$adaptive === void 0 ? true : _options$adaptive, _options$roundOffsets = options.roundOffsets, roundOffsets = _options$roundOffsets === void 0 ? true : _options$roundOffsets;
  var commonStyles = {
    placement: getBasePlacement(state.placement),
    variation: getVariation(state.placement),
    popper: state.elements.popper,
    popperRect: state.rects.popper,
    gpuAcceleration,
    isFixed: state.options.strategy === "fixed"
  };
  if (state.modifiersData.popperOffsets != null) {
    state.styles.popper = Object.assign({}, state.styles.popper, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.popperOffsets,
      position: state.options.strategy,
      adaptive,
      roundOffsets
    })));
  }
  if (state.modifiersData.arrow != null) {
    state.styles.arrow = Object.assign({}, state.styles.arrow, mapToStyles(Object.assign({}, commonStyles, {
      offsets: state.modifiersData.arrow,
      position: "absolute",
      adaptive: false,
      roundOffsets
    })));
  }
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-placement": state.placement
  });
}
var computeStyles_default = {
  name: "computeStyles",
  enabled: true,
  phase: "beforeWrite",
  fn: computeStyles,
  data: {}
};

// node_modules/@popperjs/core/lib/modifiers/eventListeners.js
var passive = {
  passive: true
};
function effect3(_ref) {
  var state = _ref.state, instance = _ref.instance, options = _ref.options;
  var _options$scroll = options.scroll, scroll = _options$scroll === void 0 ? true : _options$scroll, _options$resize = options.resize, resize = _options$resize === void 0 ? true : _options$resize;
  var window2 = getWindow(state.elements.popper);
  var scrollParents = [].concat(state.scrollParents.reference, state.scrollParents.popper);
  if (scroll) {
    scrollParents.forEach(function(scrollParent) {
      scrollParent.addEventListener("scroll", instance.update, passive);
    });
  }
  if (resize) {
    window2.addEventListener("resize", instance.update, passive);
  }
  return function() {
    if (scroll) {
      scrollParents.forEach(function(scrollParent) {
        scrollParent.removeEventListener("scroll", instance.update, passive);
      });
    }
    if (resize) {
      window2.removeEventListener("resize", instance.update, passive);
    }
  };
}
var eventListeners_default = {
  name: "eventListeners",
  enabled: true,
  phase: "write",
  fn: function fn() {
  },
  effect: effect3,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getOppositePlacement.js
var hash = {
  left: "right",
  right: "left",
  bottom: "top",
  top: "bottom"
};
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, function(matched) {
    return hash[matched];
  });
}

// node_modules/@popperjs/core/lib/utils/getOppositeVariationPlacement.js
var hash2 = {
  start: "end",
  end: "start"
};
function getOppositeVariationPlacement(placement) {
  return placement.replace(/start|end/g, function(matched) {
    return hash2[matched];
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScroll.js
function getWindowScroll(node) {
  var win = getWindow(node);
  var scrollLeft = win.pageXOffset;
  var scrollTop = win.pageYOffset;
  return {
    scrollLeft,
    scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getWindowScrollBarX.js
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getWindowScroll(element).scrollLeft;
}

// node_modules/@popperjs/core/lib/dom-utils/getViewportRect.js
function getViewportRect(element, strategy) {
  var win = getWindow(element);
  var html = getDocumentElement(element);
  var visualViewport = win.visualViewport;
  var width = html.clientWidth;
  var height = html.clientHeight;
  var x = 0;
  var y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    var layoutViewport = isLayoutViewport();
    if (layoutViewport || !layoutViewport && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x: x + getWindowScrollBarX(element),
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getDocumentRect.js
function getDocumentRect(element) {
  var _element$ownerDocumen;
  var html = getDocumentElement(element);
  var winScroll = getWindowScroll(element);
  var body = (_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body;
  var width = max(html.scrollWidth, html.clientWidth, body ? body.scrollWidth : 0, body ? body.clientWidth : 0);
  var height = max(html.scrollHeight, html.clientHeight, body ? body.scrollHeight : 0, body ? body.clientHeight : 0);
  var x = -winScroll.scrollLeft + getWindowScrollBarX(element);
  var y = -winScroll.scrollTop;
  if (getComputedStyle(body || html).direction === "rtl") {
    x += max(html.clientWidth, body ? body.clientWidth : 0) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}

// node_modules/@popperjs/core/lib/dom-utils/isScrollParent.js
function isScrollParent(element) {
  var _getComputedStyle = getComputedStyle(element), overflow = _getComputedStyle.overflow, overflowX = _getComputedStyle.overflowX, overflowY = _getComputedStyle.overflowY;
  return /auto|scroll|overlay|hidden/.test(overflow + overflowY + overflowX);
}

// node_modules/@popperjs/core/lib/dom-utils/getScrollParent.js
function getScrollParent(node) {
  if (["html", "body", "#document"].indexOf(getNodeName(node)) >= 0) {
    return node.ownerDocument.body;
  }
  if (isHTMLElement(node) && isScrollParent(node)) {
    return node;
  }
  return getScrollParent(getParentNode(node));
}

// node_modules/@popperjs/core/lib/dom-utils/listScrollParents.js
function listScrollParents(element, list) {
  var _element$ownerDocumen;
  if (list === void 0) {
    list = [];
  }
  var scrollParent = getScrollParent(element);
  var isBody = scrollParent === ((_element$ownerDocumen = element.ownerDocument) == null ? void 0 : _element$ownerDocumen.body);
  var win = getWindow(scrollParent);
  var target = isBody ? [win].concat(win.visualViewport || [], isScrollParent(scrollParent) ? scrollParent : []) : scrollParent;
  var updatedList = list.concat(target);
  return isBody ? updatedList : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    updatedList.concat(listScrollParents(getParentNode(target)))
  );
}

// node_modules/@popperjs/core/lib/utils/rectToClientRect.js
function rectToClientRect(rect) {
  return Object.assign({}, rect, {
    left: rect.x,
    top: rect.y,
    right: rect.x + rect.width,
    bottom: rect.y + rect.height
  });
}

// node_modules/@popperjs/core/lib/dom-utils/getClippingRect.js
function getInnerBoundingClientRect(element, strategy) {
  var rect = getBoundingClientRect(element, false, strategy === "fixed");
  rect.top = rect.top + element.clientTop;
  rect.left = rect.left + element.clientLeft;
  rect.bottom = rect.top + element.clientHeight;
  rect.right = rect.left + element.clientWidth;
  rect.width = element.clientWidth;
  rect.height = element.clientHeight;
  rect.x = rect.left;
  rect.y = rect.top;
  return rect;
}
function getClientRectFromMixedType(element, clippingParent, strategy) {
  return clippingParent === viewport ? rectToClientRect(getViewportRect(element, strategy)) : isElement(clippingParent) ? getInnerBoundingClientRect(clippingParent, strategy) : rectToClientRect(getDocumentRect(getDocumentElement(element)));
}
function getClippingParents(element) {
  var clippingParents2 = listScrollParents(getParentNode(element));
  var canEscapeClipping = ["absolute", "fixed"].indexOf(getComputedStyle(element).position) >= 0;
  var clipperElement = canEscapeClipping && isHTMLElement(element) ? getOffsetParent(element) : element;
  if (!isElement(clipperElement)) {
    return [];
  }
  return clippingParents2.filter(function(clippingParent) {
    return isElement(clippingParent) && contains(clippingParent, clipperElement) && getNodeName(clippingParent) !== "body";
  });
}
function getClippingRect(element, boundary, rootBoundary, strategy) {
  var mainClippingParents = boundary === "clippingParents" ? getClippingParents(element) : [].concat(boundary);
  var clippingParents2 = [].concat(mainClippingParents, [rootBoundary]);
  var firstClippingParent = clippingParents2[0];
  var clippingRect = clippingParents2.reduce(function(accRect, clippingParent) {
    var rect = getClientRectFromMixedType(element, clippingParent, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromMixedType(element, firstClippingParent, strategy));
  clippingRect.width = clippingRect.right - clippingRect.left;
  clippingRect.height = clippingRect.bottom - clippingRect.top;
  clippingRect.x = clippingRect.left;
  clippingRect.y = clippingRect.top;
  return clippingRect;
}

// node_modules/@popperjs/core/lib/utils/computeOffsets.js
function computeOffsets(_ref) {
  var reference2 = _ref.reference, element = _ref.element, placement = _ref.placement;
  var basePlacement = placement ? getBasePlacement(placement) : null;
  var variation = placement ? getVariation(placement) : null;
  var commonX = reference2.x + reference2.width / 2 - element.width / 2;
  var commonY = reference2.y + reference2.height / 2 - element.height / 2;
  var offsets;
  switch (basePlacement) {
    case top:
      offsets = {
        x: commonX,
        y: reference2.y - element.height
      };
      break;
    case bottom:
      offsets = {
        x: commonX,
        y: reference2.y + reference2.height
      };
      break;
    case right:
      offsets = {
        x: reference2.x + reference2.width,
        y: commonY
      };
      break;
    case left:
      offsets = {
        x: reference2.x - element.width,
        y: commonY
      };
      break;
    default:
      offsets = {
        x: reference2.x,
        y: reference2.y
      };
  }
  var mainAxis = basePlacement ? getMainAxisFromPlacement(basePlacement) : null;
  if (mainAxis != null) {
    var len = mainAxis === "y" ? "height" : "width";
    switch (variation) {
      case start:
        offsets[mainAxis] = offsets[mainAxis] - (reference2[len] / 2 - element[len] / 2);
        break;
      case end:
        offsets[mainAxis] = offsets[mainAxis] + (reference2[len] / 2 - element[len] / 2);
        break;
      default:
    }
  }
  return offsets;
}

// node_modules/@popperjs/core/lib/utils/detectOverflow.js
function detectOverflow(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, _options$placement = _options.placement, placement = _options$placement === void 0 ? state.placement : _options$placement, _options$strategy = _options.strategy, strategy = _options$strategy === void 0 ? state.strategy : _options$strategy, _options$boundary = _options.boundary, boundary = _options$boundary === void 0 ? clippingParents : _options$boundary, _options$rootBoundary = _options.rootBoundary, rootBoundary = _options$rootBoundary === void 0 ? viewport : _options$rootBoundary, _options$elementConte = _options.elementContext, elementContext = _options$elementConte === void 0 ? popper : _options$elementConte, _options$altBoundary = _options.altBoundary, altBoundary = _options$altBoundary === void 0 ? false : _options$altBoundary, _options$padding = _options.padding, padding = _options$padding === void 0 ? 0 : _options$padding;
  var paddingObject = mergePaddingObject(typeof padding !== "number" ? padding : expandToHashMap(padding, basePlacements));
  var altContext = elementContext === popper ? reference : popper;
  var popperRect = state.rects.popper;
  var element = state.elements[altBoundary ? altContext : elementContext];
  var clippingClientRect = getClippingRect(isElement(element) ? element : element.contextElement || getDocumentElement(state.elements.popper), boundary, rootBoundary, strategy);
  var referenceClientRect = getBoundingClientRect(state.elements.reference);
  var popperOffsets2 = computeOffsets({
    reference: referenceClientRect,
    element: popperRect,
    strategy: "absolute",
    placement
  });
  var popperClientRect = rectToClientRect(Object.assign({}, popperRect, popperOffsets2));
  var elementClientRect = elementContext === popper ? popperClientRect : referenceClientRect;
  var overflowOffsets = {
    top: clippingClientRect.top - elementClientRect.top + paddingObject.top,
    bottom: elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom,
    left: clippingClientRect.left - elementClientRect.left + paddingObject.left,
    right: elementClientRect.right - clippingClientRect.right + paddingObject.right
  };
  var offsetData = state.modifiersData.offset;
  if (elementContext === popper && offsetData) {
    var offset2 = offsetData[placement];
    Object.keys(overflowOffsets).forEach(function(key) {
      var multiply = [right, bottom].indexOf(key) >= 0 ? 1 : -1;
      var axis = [top, bottom].indexOf(key) >= 0 ? "y" : "x";
      overflowOffsets[key] += offset2[axis] * multiply;
    });
  }
  return overflowOffsets;
}

// node_modules/@popperjs/core/lib/utils/computeAutoPlacement.js
function computeAutoPlacement(state, options) {
  if (options === void 0) {
    options = {};
  }
  var _options = options, placement = _options.placement, boundary = _options.boundary, rootBoundary = _options.rootBoundary, padding = _options.padding, flipVariations = _options.flipVariations, _options$allowedAutoP = _options.allowedAutoPlacements, allowedAutoPlacements = _options$allowedAutoP === void 0 ? placements : _options$allowedAutoP;
  var variation = getVariation(placement);
  var placements2 = variation ? flipVariations ? variationPlacements : variationPlacements.filter(function(placement2) {
    return getVariation(placement2) === variation;
  }) : basePlacements;
  var allowedPlacements = placements2.filter(function(placement2) {
    return allowedAutoPlacements.indexOf(placement2) >= 0;
  });
  if (allowedPlacements.length === 0) {
    allowedPlacements = placements2;
  }
  var overflows = allowedPlacements.reduce(function(acc, placement2) {
    acc[placement2] = detectOverflow(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding
    })[getBasePlacement(placement2)];
    return acc;
  }, {});
  return Object.keys(overflows).sort(function(a, b) {
    return overflows[a] - overflows[b];
  });
}

// node_modules/@popperjs/core/lib/modifiers/flip.js
function getExpandedFallbackPlacements(placement) {
  if (getBasePlacement(placement) === auto) {
    return [];
  }
  var oppositePlacement = getOppositePlacement(placement);
  return [getOppositeVariationPlacement(placement), oppositePlacement, getOppositeVariationPlacement(oppositePlacement)];
}
function flip(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  if (state.modifiersData[name]._skip) {
    return;
  }
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? true : _options$altAxis, specifiedFallbackPlacements = options.fallbackPlacements, padding = options.padding, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, _options$flipVariatio = options.flipVariations, flipVariations = _options$flipVariatio === void 0 ? true : _options$flipVariatio, allowedAutoPlacements = options.allowedAutoPlacements;
  var preferredPlacement = state.options.placement;
  var basePlacement = getBasePlacement(preferredPlacement);
  var isBasePlacement = basePlacement === preferredPlacement;
  var fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipVariations ? [getOppositePlacement(preferredPlacement)] : getExpandedFallbackPlacements(preferredPlacement));
  var placements2 = [preferredPlacement].concat(fallbackPlacements).reduce(function(acc, placement2) {
    return acc.concat(getBasePlacement(placement2) === auto ? computeAutoPlacement(state, {
      placement: placement2,
      boundary,
      rootBoundary,
      padding,
      flipVariations,
      allowedAutoPlacements
    }) : placement2);
  }, []);
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var checksMap = /* @__PURE__ */ new Map();
  var makeFallbackChecks = true;
  var firstFittingPlacement = placements2[0];
  for (var i = 0; i < placements2.length; i++) {
    var placement = placements2[i];
    var _basePlacement = getBasePlacement(placement);
    var isStartVariation = getVariation(placement) === start;
    var isVertical = [top, bottom].indexOf(_basePlacement) >= 0;
    var len = isVertical ? "width" : "height";
    var overflow = detectOverflow(state, {
      placement,
      boundary,
      rootBoundary,
      altBoundary,
      padding
    });
    var mainVariationSide = isVertical ? isStartVariation ? right : left : isStartVariation ? bottom : top;
    if (referenceRect[len] > popperRect[len]) {
      mainVariationSide = getOppositePlacement(mainVariationSide);
    }
    var altVariationSide = getOppositePlacement(mainVariationSide);
    var checks = [];
    if (checkMainAxis) {
      checks.push(overflow[_basePlacement] <= 0);
    }
    if (checkAltAxis) {
      checks.push(overflow[mainVariationSide] <= 0, overflow[altVariationSide] <= 0);
    }
    if (checks.every(function(check) {
      return check;
    })) {
      firstFittingPlacement = placement;
      makeFallbackChecks = false;
      break;
    }
    checksMap.set(placement, checks);
  }
  if (makeFallbackChecks) {
    var numberOfChecks = flipVariations ? 3 : 1;
    var _loop = function _loop2(_i2) {
      var fittingPlacement = placements2.find(function(placement2) {
        var checks2 = checksMap.get(placement2);
        if (checks2) {
          return checks2.slice(0, _i2).every(function(check) {
            return check;
          });
        }
      });
      if (fittingPlacement) {
        firstFittingPlacement = fittingPlacement;
        return "break";
      }
    };
    for (var _i = numberOfChecks; _i > 0; _i--) {
      var _ret = _loop(_i);
      if (_ret === "break")
        break;
    }
  }
  if (state.placement !== firstFittingPlacement) {
    state.modifiersData[name]._skip = true;
    state.placement = firstFittingPlacement;
    state.reset = true;
  }
}
var flip_default = {
  name: "flip",
  enabled: true,
  phase: "main",
  fn: flip,
  requiresIfExists: ["offset"],
  data: {
    _skip: false
  }
};

// node_modules/@popperjs/core/lib/modifiers/hide.js
function getSideOffsets(overflow, rect, preventedOffsets) {
  if (preventedOffsets === void 0) {
    preventedOffsets = {
      x: 0,
      y: 0
    };
  }
  return {
    top: overflow.top - rect.height - preventedOffsets.y,
    right: overflow.right - rect.width + preventedOffsets.x,
    bottom: overflow.bottom - rect.height + preventedOffsets.y,
    left: overflow.left - rect.width - preventedOffsets.x
  };
}
function isAnySideFullyClipped(overflow) {
  return [top, right, bottom, left].some(function(side) {
    return overflow[side] >= 0;
  });
}
function hide(_ref) {
  var state = _ref.state, name = _ref.name;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var preventedOffsets = state.modifiersData.preventOverflow;
  var referenceOverflow = detectOverflow(state, {
    elementContext: "reference"
  });
  var popperAltOverflow = detectOverflow(state, {
    altBoundary: true
  });
  var referenceClippingOffsets = getSideOffsets(referenceOverflow, referenceRect);
  var popperEscapeOffsets = getSideOffsets(popperAltOverflow, popperRect, preventedOffsets);
  var isReferenceHidden = isAnySideFullyClipped(referenceClippingOffsets);
  var hasPopperEscaped = isAnySideFullyClipped(popperEscapeOffsets);
  state.modifiersData[name] = {
    referenceClippingOffsets,
    popperEscapeOffsets,
    isReferenceHidden,
    hasPopperEscaped
  };
  state.attributes.popper = Object.assign({}, state.attributes.popper, {
    "data-popper-reference-hidden": isReferenceHidden,
    "data-popper-escaped": hasPopperEscaped
  });
}
var hide_default = {
  name: "hide",
  enabled: true,
  phase: "main",
  requiresIfExists: ["preventOverflow"],
  fn: hide
};

// node_modules/@popperjs/core/lib/modifiers/offset.js
function distanceAndSkiddingToXY(placement, rects, offset2) {
  var basePlacement = getBasePlacement(placement);
  var invertDistance = [left, top].indexOf(basePlacement) >= 0 ? -1 : 1;
  var _ref = typeof offset2 === "function" ? offset2(Object.assign({}, rects, {
    placement
  })) : offset2, skidding = _ref[0], distance = _ref[1];
  skidding = skidding || 0;
  distance = (distance || 0) * invertDistance;
  return [left, right].indexOf(basePlacement) >= 0 ? {
    x: distance,
    y: skidding
  } : {
    x: skidding,
    y: distance
  };
}
function offset(_ref2) {
  var state = _ref2.state, options = _ref2.options, name = _ref2.name;
  var _options$offset = options.offset, offset2 = _options$offset === void 0 ? [0, 0] : _options$offset;
  var data = placements.reduce(function(acc, placement) {
    acc[placement] = distanceAndSkiddingToXY(placement, state.rects, offset2);
    return acc;
  }, {});
  var _data$state$placement = data[state.placement], x = _data$state$placement.x, y = _data$state$placement.y;
  if (state.modifiersData.popperOffsets != null) {
    state.modifiersData.popperOffsets.x += x;
    state.modifiersData.popperOffsets.y += y;
  }
  state.modifiersData[name] = data;
}
var offset_default = {
  name: "offset",
  enabled: true,
  phase: "main",
  requires: ["popperOffsets"],
  fn: offset
};

// node_modules/@popperjs/core/lib/modifiers/popperOffsets.js
function popperOffsets(_ref) {
  var state = _ref.state, name = _ref.name;
  state.modifiersData[name] = computeOffsets({
    reference: state.rects.reference,
    element: state.rects.popper,
    strategy: "absolute",
    placement: state.placement
  });
}
var popperOffsets_default = {
  name: "popperOffsets",
  enabled: true,
  phase: "read",
  fn: popperOffsets,
  data: {}
};

// node_modules/@popperjs/core/lib/utils/getAltAxis.js
function getAltAxis(axis) {
  return axis === "x" ? "y" : "x";
}

// node_modules/@popperjs/core/lib/modifiers/preventOverflow.js
function preventOverflow(_ref) {
  var state = _ref.state, options = _ref.options, name = _ref.name;
  var _options$mainAxis = options.mainAxis, checkMainAxis = _options$mainAxis === void 0 ? true : _options$mainAxis, _options$altAxis = options.altAxis, checkAltAxis = _options$altAxis === void 0 ? false : _options$altAxis, boundary = options.boundary, rootBoundary = options.rootBoundary, altBoundary = options.altBoundary, padding = options.padding, _options$tether = options.tether, tether = _options$tether === void 0 ? true : _options$tether, _options$tetherOffset = options.tetherOffset, tetherOffset = _options$tetherOffset === void 0 ? 0 : _options$tetherOffset;
  var overflow = detectOverflow(state, {
    boundary,
    rootBoundary,
    padding,
    altBoundary
  });
  var basePlacement = getBasePlacement(state.placement);
  var variation = getVariation(state.placement);
  var isBasePlacement = !variation;
  var mainAxis = getMainAxisFromPlacement(basePlacement);
  var altAxis = getAltAxis(mainAxis);
  var popperOffsets2 = state.modifiersData.popperOffsets;
  var referenceRect = state.rects.reference;
  var popperRect = state.rects.popper;
  var tetherOffsetValue = typeof tetherOffset === "function" ? tetherOffset(Object.assign({}, state.rects, {
    placement: state.placement
  })) : tetherOffset;
  var normalizedTetherOffsetValue = typeof tetherOffsetValue === "number" ? {
    mainAxis: tetherOffsetValue,
    altAxis: tetherOffsetValue
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, tetherOffsetValue);
  var offsetModifierState = state.modifiersData.offset ? state.modifiersData.offset[state.placement] : null;
  var data = {
    x: 0,
    y: 0
  };
  if (!popperOffsets2) {
    return;
  }
  if (checkMainAxis) {
    var _offsetModifierState$;
    var mainSide = mainAxis === "y" ? top : left;
    var altSide = mainAxis === "y" ? bottom : right;
    var len = mainAxis === "y" ? "height" : "width";
    var offset2 = popperOffsets2[mainAxis];
    var min2 = offset2 + overflow[mainSide];
    var max2 = offset2 - overflow[altSide];
    var additive = tether ? -popperRect[len] / 2 : 0;
    var minLen = variation === start ? referenceRect[len] : popperRect[len];
    var maxLen = variation === start ? -popperRect[len] : -referenceRect[len];
    var arrowElement = state.elements.arrow;
    var arrowRect = tether && arrowElement ? getLayoutRect(arrowElement) : {
      width: 0,
      height: 0
    };
    var arrowPaddingObject = state.modifiersData["arrow#persistent"] ? state.modifiersData["arrow#persistent"].padding : getFreshSideObject();
    var arrowPaddingMin = arrowPaddingObject[mainSide];
    var arrowPaddingMax = arrowPaddingObject[altSide];
    var arrowLen = within(0, referenceRect[len], arrowRect[len]);
    var minOffset = isBasePlacement ? referenceRect[len] / 2 - additive - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis : minLen - arrowLen - arrowPaddingMin - normalizedTetherOffsetValue.mainAxis;
    var maxOffset = isBasePlacement ? -referenceRect[len] / 2 + additive + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis : maxLen + arrowLen + arrowPaddingMax + normalizedTetherOffsetValue.mainAxis;
    var arrowOffsetParent = state.elements.arrow && getOffsetParent(state.elements.arrow);
    var clientOffset = arrowOffsetParent ? mainAxis === "y" ? arrowOffsetParent.clientTop || 0 : arrowOffsetParent.clientLeft || 0 : 0;
    var offsetModifierValue = (_offsetModifierState$ = offsetModifierState == null ? void 0 : offsetModifierState[mainAxis]) != null ? _offsetModifierState$ : 0;
    var tetherMin = offset2 + minOffset - offsetModifierValue - clientOffset;
    var tetherMax = offset2 + maxOffset - offsetModifierValue;
    var preventedOffset = within(tether ? min(min2, tetherMin) : min2, offset2, tether ? max(max2, tetherMax) : max2);
    popperOffsets2[mainAxis] = preventedOffset;
    data[mainAxis] = preventedOffset - offset2;
  }
  if (checkAltAxis) {
    var _offsetModifierState$2;
    var _mainSide = mainAxis === "x" ? top : left;
    var _altSide = mainAxis === "x" ? bottom : right;
    var _offset = popperOffsets2[altAxis];
    var _len = altAxis === "y" ? "height" : "width";
    var _min = _offset + overflow[_mainSide];
    var _max = _offset - overflow[_altSide];
    var isOriginSide = [top, left].indexOf(basePlacement) !== -1;
    var _offsetModifierValue = (_offsetModifierState$2 = offsetModifierState == null ? void 0 : offsetModifierState[altAxis]) != null ? _offsetModifierState$2 : 0;
    var _tetherMin = isOriginSide ? _min : _offset - referenceRect[_len] - popperRect[_len] - _offsetModifierValue + normalizedTetherOffsetValue.altAxis;
    var _tetherMax = isOriginSide ? _offset + referenceRect[_len] + popperRect[_len] - _offsetModifierValue - normalizedTetherOffsetValue.altAxis : _max;
    var _preventedOffset = tether && isOriginSide ? withinMaxClamp(_tetherMin, _offset, _tetherMax) : within(tether ? _tetherMin : _min, _offset, tether ? _tetherMax : _max);
    popperOffsets2[altAxis] = _preventedOffset;
    data[altAxis] = _preventedOffset - _offset;
  }
  state.modifiersData[name] = data;
}
var preventOverflow_default = {
  name: "preventOverflow",
  enabled: true,
  phase: "main",
  fn: preventOverflow,
  requiresIfExists: ["offset"]
};

// node_modules/@popperjs/core/lib/dom-utils/getHTMLElementScroll.js
function getHTMLElementScroll(element) {
  return {
    scrollLeft: element.scrollLeft,
    scrollTop: element.scrollTop
  };
}

// node_modules/@popperjs/core/lib/dom-utils/getNodeScroll.js
function getNodeScroll(node) {
  if (node === getWindow(node) || !isHTMLElement(node)) {
    return getWindowScroll(node);
  } else {
    return getHTMLElementScroll(node);
  }
}

// node_modules/@popperjs/core/lib/dom-utils/getCompositeRect.js
function isElementScaled(element) {
  var rect = element.getBoundingClientRect();
  var scaleX = round(rect.width) / element.offsetWidth || 1;
  var scaleY = round(rect.height) / element.offsetHeight || 1;
  return scaleX !== 1 || scaleY !== 1;
}
function getCompositeRect(elementOrVirtualElement, offsetParent, isFixed) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  var isOffsetParentAnElement = isHTMLElement(offsetParent);
  var offsetParentIsScaled = isHTMLElement(offsetParent) && isElementScaled(offsetParent);
  var documentElement = getDocumentElement(offsetParent);
  var rect = getBoundingClientRect(elementOrVirtualElement, offsetParentIsScaled, isFixed);
  var scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  var offsets = {
    x: 0,
    y: 0
  };
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
    isScrollParent(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      offsets = getBoundingClientRect(offsetParent, true);
      offsets.x += offsetParent.clientLeft;
      offsets.y += offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  return {
    x: rect.left + scroll.scrollLeft - offsets.x,
    y: rect.top + scroll.scrollTop - offsets.y,
    width: rect.width,
    height: rect.height
  };
}

// node_modules/@popperjs/core/lib/utils/orderModifiers.js
function order(modifiers) {
  var map = /* @__PURE__ */ new Map();
  var visited = /* @__PURE__ */ new Set();
  var result = [];
  modifiers.forEach(function(modifier) {
    map.set(modifier.name, modifier);
  });
  function sort(modifier) {
    visited.add(modifier.name);
    var requires = [].concat(modifier.requires || [], modifier.requiresIfExists || []);
    requires.forEach(function(dep) {
      if (!visited.has(dep)) {
        var depModifier = map.get(dep);
        if (depModifier) {
          sort(depModifier);
        }
      }
    });
    result.push(modifier);
  }
  modifiers.forEach(function(modifier) {
    if (!visited.has(modifier.name)) {
      sort(modifier);
    }
  });
  return result;
}
function orderModifiers(modifiers) {
  var orderedModifiers = order(modifiers);
  return modifierPhases.reduce(function(acc, phase) {
    return acc.concat(orderedModifiers.filter(function(modifier) {
      return modifier.phase === phase;
    }));
  }, []);
}

// node_modules/@popperjs/core/lib/utils/debounce.js
function debounce(fn2) {
  var pending;
  return function() {
    if (!pending) {
      pending = new Promise(function(resolve) {
        Promise.resolve().then(function() {
          pending = void 0;
          resolve(fn2());
        });
      });
    }
    return pending;
  };
}

// node_modules/@popperjs/core/lib/utils/mergeByName.js
function mergeByName(modifiers) {
  var merged = modifiers.reduce(function(merged2, current) {
    var existing = merged2[current.name];
    merged2[current.name] = existing ? Object.assign({}, existing, current, {
      options: Object.assign({}, existing.options, current.options),
      data: Object.assign({}, existing.data, current.data)
    }) : current;
    return merged2;
  }, {});
  return Object.keys(merged).map(function(key) {
    return merged[key];
  });
}

// node_modules/@popperjs/core/lib/createPopper.js
var DEFAULT_OPTIONS = {
  placement: "bottom",
  modifiers: [],
  strategy: "absolute"
};
function areValidElements() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  return !args.some(function(element) {
    return !(element && typeof element.getBoundingClientRect === "function");
  });
}
function popperGenerator(generatorOptions) {
  if (generatorOptions === void 0) {
    generatorOptions = {};
  }
  var _generatorOptions = generatorOptions, _generatorOptions$def = _generatorOptions.defaultModifiers, defaultModifiers3 = _generatorOptions$def === void 0 ? [] : _generatorOptions$def, _generatorOptions$def2 = _generatorOptions.defaultOptions, defaultOptions = _generatorOptions$def2 === void 0 ? DEFAULT_OPTIONS : _generatorOptions$def2;
  return function createPopper4(reference2, popper2, options) {
    if (options === void 0) {
      options = defaultOptions;
    }
    var state = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, DEFAULT_OPTIONS, defaultOptions),
      modifiersData: {},
      elements: {
        reference: reference2,
        popper: popper2
      },
      attributes: {},
      styles: {}
    };
    var effectCleanupFns = [];
    var isDestroyed = false;
    var instance = {
      state,
      setOptions: function setOptions(setOptionsAction) {
        var options2 = typeof setOptionsAction === "function" ? setOptionsAction(state.options) : setOptionsAction;
        cleanupModifierEffects();
        state.options = Object.assign({}, defaultOptions, state.options, options2);
        state.scrollParents = {
          reference: isElement(reference2) ? listScrollParents(reference2) : reference2.contextElement ? listScrollParents(reference2.contextElement) : [],
          popper: listScrollParents(popper2)
        };
        var orderedModifiers = orderModifiers(mergeByName([].concat(defaultModifiers3, state.options.modifiers)));
        state.orderedModifiers = orderedModifiers.filter(function(m) {
          return m.enabled;
        });
        runModifierEffects();
        return instance.update();
      },
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: function forceUpdate() {
        if (isDestroyed) {
          return;
        }
        var _state$elements = state.elements, reference3 = _state$elements.reference, popper3 = _state$elements.popper;
        if (!areValidElements(reference3, popper3)) {
          return;
        }
        state.rects = {
          reference: getCompositeRect(reference3, getOffsetParent(popper3), state.options.strategy === "fixed"),
          popper: getLayoutRect(popper3)
        };
        state.reset = false;
        state.placement = state.options.placement;
        state.orderedModifiers.forEach(function(modifier) {
          return state.modifiersData[modifier.name] = Object.assign({}, modifier.data);
        });
        for (var index = 0; index < state.orderedModifiers.length; index++) {
          if (state.reset === true) {
            state.reset = false;
            index = -1;
            continue;
          }
          var _state$orderedModifie = state.orderedModifiers[index], fn2 = _state$orderedModifie.fn, _state$orderedModifie2 = _state$orderedModifie.options, _options = _state$orderedModifie2 === void 0 ? {} : _state$orderedModifie2, name = _state$orderedModifie.name;
          if (typeof fn2 === "function") {
            state = fn2({
              state,
              options: _options,
              name,
              instance
            }) || state;
          }
        }
      },
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: debounce(function() {
        return new Promise(function(resolve) {
          instance.forceUpdate();
          resolve(state);
        });
      }),
      destroy: function destroy() {
        cleanupModifierEffects();
        isDestroyed = true;
      }
    };
    if (!areValidElements(reference2, popper2)) {
      return instance;
    }
    instance.setOptions(options).then(function(state2) {
      if (!isDestroyed && options.onFirstUpdate) {
        options.onFirstUpdate(state2);
      }
    });
    function runModifierEffects() {
      state.orderedModifiers.forEach(function(_ref) {
        var name = _ref.name, _ref$options = _ref.options, options2 = _ref$options === void 0 ? {} : _ref$options, effect4 = _ref.effect;
        if (typeof effect4 === "function") {
          var cleanupFn = effect4({
            state,
            name,
            instance,
            options: options2
          });
          var noopFn = function noopFn2() {
          };
          effectCleanupFns.push(cleanupFn || noopFn);
        }
      });
    }
    function cleanupModifierEffects() {
      effectCleanupFns.forEach(function(fn2) {
        return fn2();
      });
      effectCleanupFns = [];
    }
    return instance;
  };
}
var createPopper = popperGenerator();

// node_modules/@popperjs/core/lib/popper-lite.js
var defaultModifiers = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default];
var createPopper2 = popperGenerator({
  defaultModifiers
});

// node_modules/@popperjs/core/lib/popper.js
var defaultModifiers2 = [eventListeners_default, popperOffsets_default, computeStyles_default, applyStyles_default, offset_default, flip_default, preventOverflow_default, arrow_default, hide_default];
var createPopper3 = popperGenerator({
  defaultModifiers: defaultModifiers2
});

// node_modules/react-popper/lib/esm/usePopper.js
var import_react_fast_compare = __toESM(require_react_fast_compare());
var EMPTY_MODIFIERS = [];
var usePopper = function usePopper2(referenceElement, popperElement, options) {
  if (options === void 0) {
    options = {};
  }
  var prevOptions = React17.useRef(null);
  var optionsWithDefaults = {
    onFirstUpdate: options.onFirstUpdate,
    placement: options.placement || "bottom",
    strategy: options.strategy || "absolute",
    modifiers: options.modifiers || EMPTY_MODIFIERS
  };
  var _React$useState = React17.useState({
    styles: {
      popper: {
        position: optionsWithDefaults.strategy,
        left: "0",
        top: "0"
      },
      arrow: {
        position: "absolute"
      }
    },
    attributes: {}
  }), state = _React$useState[0], setState = _React$useState[1];
  var updateStateModifier = React17.useMemo(function() {
    return {
      name: "updateState",
      enabled: true,
      phase: "write",
      fn: function fn2(_ref) {
        var state2 = _ref.state;
        var elements = Object.keys(state2.elements);
        ReactDOM.flushSync(function() {
          setState({
            styles: fromEntries(elements.map(function(element) {
              return [element, state2.styles[element] || {}];
            })),
            attributes: fromEntries(elements.map(function(element) {
              return [element, state2.attributes[element]];
            }))
          });
        });
      },
      requires: ["computeStyles"]
    };
  }, []);
  var popperOptions = React17.useMemo(function() {
    var newOptions = {
      onFirstUpdate: optionsWithDefaults.onFirstUpdate,
      placement: optionsWithDefaults.placement,
      strategy: optionsWithDefaults.strategy,
      modifiers: [].concat(optionsWithDefaults.modifiers, [updateStateModifier, {
        name: "applyStyles",
        enabled: false
      }])
    };
    if ((0, import_react_fast_compare.default)(prevOptions.current, newOptions)) {
      return prevOptions.current || newOptions;
    } else {
      prevOptions.current = newOptions;
      return newOptions;
    }
  }, [optionsWithDefaults.onFirstUpdate, optionsWithDefaults.placement, optionsWithDefaults.strategy, optionsWithDefaults.modifiers, updateStateModifier]);
  var popperInstanceRef = React17.useRef();
  useIsomorphicLayoutEffect(function() {
    if (popperInstanceRef.current) {
      popperInstanceRef.current.setOptions(popperOptions);
    }
  }, [popperOptions]);
  useIsomorphicLayoutEffect(function() {
    if (referenceElement == null || popperElement == null) {
      return;
    }
    var createPopper4 = options.createPopper || createPopper3;
    var popperInstance = createPopper4(referenceElement, popperElement, popperOptions);
    popperInstanceRef.current = popperInstance;
    return function() {
      popperInstance.destroy();
      popperInstanceRef.current = null;
    };
  }, [referenceElement, popperElement, options.createPopper]);
  return {
    state: popperInstanceRef.current ? popperInstanceRef.current.state : null,
    styles: state.styles,
    attributes: state.attributes,
    update: popperInstanceRef.current ? popperInstanceRef.current.update : null,
    forceUpdate: popperInstanceRef.current ? popperInstanceRef.current.forceUpdate : null
  };
};

// node_modules/react-popper/lib/esm/Popper.js
var NOOP = function NOOP2() {
  return void 0;
};
var NOOP_PROMISE = function NOOP_PROMISE2() {
  return Promise.resolve(null);
};
var EMPTY_MODIFIERS2 = [];
function Popper(_ref) {
  var _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom" : _ref$placement, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "absolute" : _ref$strategy, _ref$modifiers = _ref.modifiers, modifiers = _ref$modifiers === void 0 ? EMPTY_MODIFIERS2 : _ref$modifiers, referenceElement = _ref.referenceElement, onFirstUpdate = _ref.onFirstUpdate, innerRef = _ref.innerRef, children = _ref.children;
  var referenceNode = React18.useContext(ManagerReferenceNodeContext);
  var _React$useState = React18.useState(null), popperElement = _React$useState[0], setPopperElement = _React$useState[1];
  var _React$useState2 = React18.useState(null), arrowElement = _React$useState2[0], setArrowElement = _React$useState2[1];
  React18.useEffect(function() {
    setRef(innerRef, popperElement);
  }, [innerRef, popperElement]);
  var options = React18.useMemo(function() {
    return {
      placement,
      strategy,
      onFirstUpdate,
      modifiers: [].concat(modifiers, [{
        name: "arrow",
        enabled: arrowElement != null,
        options: {
          element: arrowElement
        }
      }])
    };
  }, [placement, strategy, onFirstUpdate, modifiers, arrowElement]);
  var _usePopper = usePopper(referenceElement || referenceNode, popperElement, options), state = _usePopper.state, styles = _usePopper.styles, forceUpdate = _usePopper.forceUpdate, update = _usePopper.update;
  var childrenProps = React18.useMemo(function() {
    return {
      ref: setPopperElement,
      style: styles.popper,
      placement: state ? state.placement : placement,
      hasPopperEscaped: state && state.modifiersData.hide ? state.modifiersData.hide.hasPopperEscaped : null,
      isReferenceHidden: state && state.modifiersData.hide ? state.modifiersData.hide.isReferenceHidden : null,
      arrowProps: {
        style: styles.arrow,
        ref: setArrowElement
      },
      forceUpdate: forceUpdate || NOOP,
      update: update || NOOP_PROMISE
    };
  }, [setPopperElement, setArrowElement, placement, state, styles, update, forceUpdate]);
  return unwrapArray(children)(childrenProps);
}

// node_modules/react-popper/lib/esm/Reference.js
var React19 = __toESM(require_react());
var import_warning = __toESM(require_warning());

// node_modules/@atlaskit/popper/dist/esm/popper.js
var constantModifiers = [{
  name: "flip",
  options: {
    flipVariations: false,
    padding: 5,
    boundary: "clippingParents",
    rootBoundary: "viewport"
  }
}, {
  name: "preventOverflow",
  options: {
    padding: 5,
    rootBoundary: "document"
  }
}];
function defaultChildrenFn() {
  return null;
}
var defaultOffset = [0, 8];
function Popper2(_ref) {
  var _ref$children = _ref.children, children = _ref$children === void 0 ? defaultChildrenFn : _ref$children, _ref$offset = _ref.offset, offset2 = _ref$offset === void 0 ? defaultOffset : _ref$offset, _ref$placement = _ref.placement, placement = _ref$placement === void 0 ? "bottom-start" : _ref$placement, _ref$referenceElement = _ref.referenceElement, referenceElement = _ref$referenceElement === void 0 ? void 0 : _ref$referenceElement, modifiers = _ref.modifiers, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy;
  var _offset = _slicedToArray(offset2, 2), offsetX = _offset[0], offsetY = _offset[1];
  var internalModifiers = (0, import_react32.useMemo)(function() {
    var offsetModifier = {
      name: "offset",
      options: {
        offset: [offsetX, offsetY]
      }
    };
    return [].concat(constantModifiers, [offsetModifier]);
  }, [offsetX, offsetY]);
  var mergedModifiers = (0, import_react32.useMemo)(function() {
    if (modifiers == null) {
      return internalModifiers;
    }
    return [].concat(_toConsumableArray(internalModifiers), _toConsumableArray(modifiers));
  }, [internalModifiers, modifiers]);
  return import_react32.default.createElement(Popper, {
    modifiers: mergedModifiers,
    placement,
    strategy,
    referenceElement
  }, children);
}

// node_modules/@atlaskit/portal/dist/esm/portal.js
var import_react36 = __toESM(require_react());

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
var import_react33 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/@atlaskit/portal/dist/esm/internal/constants.js
var portalParentClassName = "atlaskit-portal-container";
var portalParentSelector = "body > .atlaskit-portal-container";
var portalClassName = "atlaskit-portal";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-dom-utils.js
var createContainer = function createContainer2(zIndex) {
  var container = document.createElement("div");
  container.className = portalClassName;
  container.style.zIndex = "".concat(zIndex);
  return container;
};
var getBody = function getBody2() {
  return document.body;
};
var getPortalParent = function getPortalParent2() {
  var parentElement = document.querySelector(portalParentSelector);
  if (!parentElement) {
    var parent = document.createElement("div");
    parent.className = portalParentClassName;
    parent.style.display = "flex";
    getBody().appendChild(parent);
    return parent;
  }
  return parentElement;
};
var removePortalContainer = function removePortalContainer2(container) {
  getPortalParent().removeChild(container);
};
var appendPortalContainerIfNotAppended = function appendPortalContainerIfNotAppended2(container) {
  if (!container.parentElement) {
    getPortalParent().appendChild(container);
  }
};

// node_modules/@atlaskit/portal/dist/esm/internal/components/internal-portal.js
function InternalPortal(props) {
  var zIndex = props.zIndex, children = props.children;
  var container = (0, import_react33.useMemo)(function() {
    return createContainer(zIndex);
  }, [zIndex]);
  appendPortalContainerIfNotAppended(container);
  (0, import_react33.useEffect)(function() {
    return function() {
      removePortalContainer(container);
    };
  }, [container]);
  return (0, import_react_dom.createPortal)(children, container);
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-is-subsequent-render.js
var import_react34 = __toESM(require_react());
var useIsSubsequentRender = function useIsSubsequentRender2() {
  var _useState = (0, import_react34.useState)(false), _useState2 = _slicedToArray(_useState, 2), isSubsequentRender = _useState2[0], setIsSubsequentRender = _useState2[1];
  (0, import_react34.useEffect)(function() {
    setIsSubsequentRender(true);
  }, []);
  return isSubsequentRender;
};
var use_is_subsequent_render_default = useIsSubsequentRender;

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var import_react35 = __toESM(require_react());

// node_modules/@atlaskit/portal/dist/esm/constants.js
var PORTAL_MOUNT_EVENT = "akPortalMount";
var PORTAL_UNMOUNT_EVENT = "akPortalUnmount";

// node_modules/@atlaskit/portal/dist/esm/internal/utils/portal-custom-event.js
var zIndexToName = {
  100: "card",
  200: "navigation",
  300: "dialog",
  400: "layer",
  500: "blanket",
  510: "modal",
  600: "flag",
  700: "spotlight",
  9999: "tooltip"
};
var getLayerName = function getLayerName2(zIndex) {
  return zIndexToName.hasOwnProperty(zIndex) ? zIndexToName[zIndex] : null;
};
var getEvent = function getEvent2(eventName, zIndex) {
  var detail = {
    layer: getLayerName(Number(zIndex)),
    zIndex
  };
  return new CustomEvent(eventName, {
    detail
  });
};
function firePortalEvent(eventName, zIndex) {
  var event = getEvent(eventName, zIndex);
  window.dispatchEvent(event);
}

// node_modules/@atlaskit/portal/dist/esm/internal/hooks/use-portal-event.js
var useFirePortalEvent = function useFirePortalEvent2(zIndex) {
  var zIndexNumber = Number(zIndex);
  (0, import_react35.useEffect)(function() {
    firePortalEvent(PORTAL_MOUNT_EVENT, zIndexNumber);
    return function() {
      firePortalEvent(PORTAL_UNMOUNT_EVENT, zIndexNumber);
    };
  }, [zIndexNumber]);
};
var use_portal_event_default = useFirePortalEvent;

// node_modules/@atlaskit/portal/dist/esm/portal.js
function Portal(props) {
  var _props$zIndex = props.zIndex, zIndex = _props$zIndex === void 0 ? 0 : _props$zIndex, children = props.children;
  var isSubsequentRender = use_is_subsequent_render_default();
  use_portal_event_default(zIndex);
  return isSubsequentRender ? import_react36.default.createElement(InternalPortal, {
    zIndex
  }, children) : null;
}

// node_modules/@atlaskit/theme/dist/esm/utils/get-theme.js
function getTheme(props) {
  if (props && props.theme) {
    if (CHANNEL in props.theme) {
      return props.theme[CHANNEL];
    } else if ("mode" in props.theme && THEME_MODES.includes(props.theme.mode)) {
      return props.theme;
    }
  }
  return {
    mode: DEFAULT_THEME_MODE
  };
}

// node_modules/@atlaskit/theme/dist/esm/utils/themed.js
function themedVariants(variantProp, variants) {
  return function(props) {
    var theme = getTheme(props);
    if (props && props[variantProp] && variants) {
      var modes = variants[props[variantProp]];
      if (modes && modes[theme.mode]) {
        var value = modes[theme.mode];
        if (value) {
          return value;
        }
      }
    }
    return "";
  };
}
function themed(modesOrVariant, variantModes) {
  if (typeof modesOrVariant === "string") {
    return themedVariants(modesOrVariant, variantModes);
  }
  var modes = modesOrVariant;
  return function(props) {
    var theme = getTheme(props);
    if (theme.mode in modes) {
      var value = modes[theme.mode];
      if (value) {
        return value;
      }
    }
    return "";
  };
}

// node_modules/@atlaskit/theme/dist/esm/colors.js
var R300 = "#FF5630";
var Y300 = "#FFAB00";
var G300 = "#36B37E";
var B50 = "#DEEBFF";
var B75 = "#B3D4FF";
var B100 = "#4C9AFF";
var B200 = "#2684FF";
var B300 = "#0065FF";
var B400 = "#0052CC";
var B500 = "#0747A6";
var P100 = "#998DD9";
var P300 = "#6554C0";
var T200 = "#00C7E6";
var T300 = "#00B8D9";
var N0 = "#FFFFFF";
var N20 = "#F4F5F7";
var N30 = "#EBECF0";
var N200 = "#6B778C";
var N800 = "#172B4D";
var N900 = "#091E42";
var DN600 = "#B8C7E0";
var DN300 = "#8C9CB8";
var DN200 = "#7988A3";
var DN70 = "#3B475C";
var DN50 = "#283447";
var DN30 = "#1B2638";
var DN0 = "#0D1424";
var background = themed({
  light: "var(--ds-surface, ".concat(N0, ")"),
  dark: "var(--ds-surface, ".concat(DN30, ")")
});
var backgroundActive = themed({
  light: "var(--ds-background-selected, ".concat(B50, ")"),
  dark: "var(--ds-background-selected, ".concat(B75, ")")
});
var backgroundHover = themed({
  light: "var(--ds-background-neutral-hovered, ".concat(N30, ")"),
  dark: "var(--ds-background-neutral-hovered, ".concat(DN70, ")")
});
var backgroundOnLayer = themed({
  light: "var(--ds-surface-overlay, ".concat(N0, ")"),
  dark: "var(--ds-surface-overlay, ".concat(DN50, ")")
});
var text = themed({
  light: "var(--ds-text, ".concat(N900, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var textHover = themed({
  light: "var(--ds-text, ".concat(N800, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var textActive = themed({
  light: "var(--ds-text-selected, ".concat(B400, ")"),
  dark: "var(--ds-text-selected, ".concat(B400, ")")
});
var subtleText = themed({
  light: "var(--ds-text-subtlest, ".concat(N200, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN300, ")")
});
var placeholderText = themed({
  light: "var(--ds-text-subtlest, ".concat(N200, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN200, ")")
});
var heading = themed({
  light: "var(--ds-text, ".concat(N800, ")"),
  dark: "var(--ds-text, ".concat(DN600, ")")
});
var subtleHeading = themed({
  light: "var(--ds-text-subtlest, ".concat(N200, ")"),
  dark: "var(--ds-text-subtlest, ".concat(DN300, ")")
});
var codeBlock = themed({
  light: N20,
  dark: DN50
});
var link = themed({
  light: "var(--ds-link, ".concat(B400, ")"),
  dark: "var(--ds-link, ".concat(B100, ")")
});
var linkHover = themed({
  light: "var(--ds-link-pressed, ".concat(B300, ")"),
  dark: "var(--ds-link-pressed, ".concat(B200, ")")
});
var linkActive = themed({
  light: "var(--ds-link-pressed, ".concat(B500, ")"),
  dark: "var(--ds-link-pressed, ".concat(B100, ")")
});
var linkOutline = themed({
  light: "var(--ds-border-focused, ".concat(B200, ")"),
  dark: "var(--ds-border-focused, ".concat(B200, ")")
});
var primary = themed({
  light: "var(--ds-background-brand-bold, ".concat(B400, ")"),
  dark: "var(--ds-background-brand-bold, ".concat(B100, ")")
});
var blue = themed({
  light: B400,
  dark: B100
});
var teal = themed({
  light: T300,
  dark: T200
});
var purple = themed({
  light: P300,
  dark: P100
});
var red = themed({
  light: R300,
  dark: R300
});
var yellow = themed({
  light: Y300,
  dark: Y300
});
var green = themed({
  light: G300,
  dark: G300
});

// node_modules/@atlaskit/theme/dist/esm/constants.js
var CHANNEL = "__ATLASKIT_THEME__";
var DEFAULT_THEME_MODE = "light";
var THEME_MODES = ["light", "dark"];
var layers = {
  card: function card() {
    return 100;
  },
  navigation: function navigation() {
    return 200;
  },
  dialog: function dialog() {
    return 300;
  },
  layer: function layer() {
    return 400;
  },
  blanket: function blanket() {
    return 500;
  },
  modal: function modal() {
    return 510;
  },
  flag: function flag() {
    return 600;
  },
  spotlight: function spotlight() {
    return 700;
  },
  tooltip: function tooltip() {
    return 9999;
  }
};

// node_modules/@atlaskit/tooltip/dist/esm/internal/shared-schedule.js
var delayId = null;
function clearScheduled() {
  if (delayId != null) {
    window.clearTimeout(delayId);
    delayId = null;
  }
}
function scheduleTimeout(fn2, delay) {
  clearScheduled();
  delayId = window.setTimeout(function() {
    delayId = null;
    fn2();
  }, delay);
}

// node_modules/@atlaskit/tooltip/dist/esm/internal/tooltip-manager.js
var active = null;
function show(entry) {
  var phase = "waiting-to-show";
  function isActive() {
    return Boolean(active && active.entry === entry);
  }
  function cleanup() {
    if (isActive()) {
      clearScheduled();
      active = null;
    }
  }
  function done() {
    if (isActive()) {
      entry.done();
    }
    phase = "done";
    cleanup();
  }
  function immediatelyHideAndDone() {
    if (isActive()) {
      entry.hide({
        isImmediate: true
      });
    }
    done();
  }
  function keep() {
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-hide") {
      phase = "shown";
      clearScheduled();
      return;
    }
    if (phase === "hide-animating") {
      phase = "shown";
      clearScheduled();
      entry.show({
        isImmediate: false
      });
      return;
    }
  }
  function requestHide(_ref) {
    var isImmediate = _ref.isImmediate;
    if (!isActive()) {
      return;
    }
    if (phase === "waiting-to-show") {
      immediatelyHideAndDone();
      return;
    }
    if (phase === "waiting-to-hide") {
      return;
    }
    if (isImmediate) {
      immediatelyHideAndDone();
      return;
    }
    phase = "waiting-to-hide";
    scheduleTimeout(function() {
      phase = "hide-animating";
      entry.hide({
        isImmediate: false
      });
    }, entry.delay);
  }
  function finishHideAnimation() {
    if (isActive() && phase === "hide-animating") {
      done();
    }
  }
  function isVisible() {
    return phase === "shown" || phase === "waiting-to-hide" || phase === "hide-animating";
  }
  function getInitialMouse() {
    if (entry.source.type === "mouse") {
      return entry.source.mouse;
    }
    return null;
  }
  function start2() {
    var showImmediately = Boolean(active && active.isVisible());
    if (active) {
      clearScheduled();
      active.entry.hide({
        isImmediate: true
      });
      active.entry.done();
      active = null;
    }
    active = {
      entry,
      isVisible
    };
    function show2() {
      phase = "shown";
      entry.show({
        isImmediate: showImmediately
      });
    }
    if (showImmediately) {
      show2();
      return;
    }
    phase = "waiting-to-show";
    scheduleTimeout(show2, entry.delay);
  }
  start2();
  var result = {
    keep,
    abort: cleanup,
    isActive,
    requestHide,
    finishHideAnimation,
    mousePosition: getInitialMouse()
  };
  return result;
}

// node_modules/react-uid/dist/es2015/Control.js
var React25 = __toESM(require_react());
var import_react38 = __toESM(require_react());

// node_modules/react-uid/dist/es2015/UIDComponent.js
var React23 = __toESM(require_react());

// node_modules/react-uid/dist/es2015/context.js
var React22 = __toESM(require_react());

// node_modules/react-uid/dist/es2015/uid.js
var generateUID = function() {
  var counter2 = 1;
  var map = /* @__PURE__ */ new WeakMap();
  var uid2 = function(item, index) {
    if (typeof item === "number" || typeof item === "string") {
      return index ? "idx-".concat(index) : "val-".concat(item);
    }
    if (!map.has(item)) {
      map.set(item, counter2++);
      return uid2(item);
    }
    return "uid" + map.get(item);
  };
  return uid2;
};
var uid = generateUID();

// node_modules/react-uid/dist/es2015/context.js
var createSource = function(prefix) {
  if (prefix === void 0) {
    prefix = "";
  }
  return {
    value: 1,
    prefix,
    uid: generateUID()
  };
};
var counter = createSource();
var source = React22.createContext(createSource());
var getId = function(source2) {
  return source2.value++;
};
var getPrefix = function(source2) {
  return source2 ? source2.prefix : "";
};

// node_modules/react-uid/dist/es2015/UIDComponent.js
var __extends = function() {
  var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
      d2.__proto__ = b2;
    } || function(d2, b2) {
      for (var p in b2)
        if (Object.prototype.hasOwnProperty.call(b2, p))
          d2[p] = b2[p];
    };
    return extendStatics(d, b);
  };
  return function(d, b) {
    if (typeof b !== "function" && b !== null)
      throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
    extendStatics(d, b);
    function __() {
      this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
  };
}();
var prefixId = function(id, prefix, name) {
  var uid2 = prefix + id;
  return String(name ? name(uid2) : uid2);
};
var UID = (
  /** @class */
  function(_super) {
    __extends(UID2, _super);
    function UID2() {
      var _this = _super !== null && _super.apply(this, arguments) || this;
      _this.state = {
        quartz: _this.props.idSource || counter,
        prefix: getPrefix(_this.props.idSource),
        id: getId(_this.props.idSource || counter)
      };
      _this.uid = function(item) {
        return prefixId(_this.state.id + "-" + _this.state.quartz.uid(item), _this.state.prefix, _this.props.name);
      };
      return _this;
    }
    UID2.prototype.render = function() {
      var _a = this.props, children = _a.children, name = _a.name;
      var _b = this.state, id = _b.id, prefix = _b.prefix;
      return children(prefixId(id, prefix, name), this.uid);
    };
    return UID2;
  }(React23.Component)
);

// node_modules/react-uid/dist/es2015/hooks.js
var React24 = __toESM(require_react());
var import_react37 = __toESM(require_react());
var generateUID2 = function(context) {
  var quartz = context || counter;
  var prefix = getPrefix(quartz);
  var id = getId(quartz);
  var uid2 = prefix + id;
  var gen = function(item) {
    return uid2 + quartz.uid(item);
  };
  return { uid: uid2, gen };
};
var useUIDState = function() {
  if (true) {
    if (!("useContext" in React24)) {
      throw new Error("Hooks API requires React 16.8+");
    }
  }
  var context = (0, import_react37.useContext)(source);
  var uid2 = (0, import_react37.useState)(function() {
    return generateUID2(context);
  })[0];
  return uid2;
};
var useUIDSeed = function() {
  var gen = useUIDState().gen;
  return gen;
};

// node_modules/@atlaskit/tooltip/dist/esm/internal/use-unique-id.js
function useUniqueId2(prefix, shouldRenderId) {
  var seed = useUIDSeed();
  return shouldRenderId ? "".concat(seed(prefix)) : void 0;
}

// node_modules/@atlaskit/tooltip/dist/esm/TooltipContainer.js
var import_react44 = __toESM(require_react());

// node_modules/@atlaskit/theme/dist/esm/components/atlaskit-theme-provider.js
var import_react41 = __toESM(require_react());

// node_modules/@atlaskit/theme/dist/esm/components/hooks/use-theme-reset-styles.js
var import_react39 = __toESM(require_react());
var SELECTOR = "old-ds-theme-mode";
var baseResetStyles = [{
  mode: "light"
}, {
  mode: "dark"
}].map(function(theme) {
  return "\n  .".concat(theme.mode, "-").concat(SELECTOR, " {\n    color: ").concat(text({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a {\n    color: ").concat(link({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:hover {\n    color: ").concat(linkHover({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:active {\n    color: ").concat(linkActive({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " a:focus {\n    outlineColor: ").concat(linkOutline({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h1,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h2,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h3,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h4,\n  .").concat(theme.mode, "-").concat(SELECTOR, " h5 {\n    color: ").concat(heading({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " h6 {\n    color: ").concat(subtleHeading({
    theme
  }), ";\n  }\n  .").concat(theme.mode, "-").concat(SELECTOR, " small {\n    color: ").concat(subtleText({
    theme
  }), ";\n  }");
}).join("\n");
var getStylesheetResetCSS = function getStylesheetResetCSS2(backgroundColor) {
  return "body { background: ".concat(backgroundColor, "; }");
};
var UNIQUE_INTERNAL_ID = "ds--theme--ak-theme-provider";
var UNIQUE_BODY_BG_ID = "ds--theme--ak-body-background";
var useThemeResetStyles = function useThemeResetStyles2(backgroundColor) {
  var stylesheet = (0, import_react39.useRef)(null);
  var bgColorNode = (0, import_react39.useRef)(null);
  (0, import_react39.useEffect)(function() {
    var hasNode = document.getElementById(UNIQUE_INTERNAL_ID);
    if (hasNode) {
      return;
    }
    stylesheet.current = document.createElement("style");
    if (document && document.head) {
      stylesheet.current.id = UNIQUE_INTERNAL_ID;
      document.head.prepend(stylesheet.current);
      stylesheet.current.innerHTML = baseResetStyles;
      return function() {
        if (stylesheet.current && document && document.head) {
          document.head.removeChild(stylesheet.current);
          stylesheet.current = null;
        }
      };
    }
  }, []);
  (0, import_react39.useEffect)(function() {
    var hasBodyNode = document.getElementById(UNIQUE_BODY_BG_ID);
    if (document && document.head) {
      if (!hasBodyNode) {
        bgColorNode.current = document.createElement("style");
        bgColorNode.current.id = UNIQUE_BODY_BG_ID;
        document.head.append(bgColorNode.current);
      }
      if (bgColorNode.current) {
        var cssBgColor = getStylesheetResetCSS(backgroundColor);
        bgColorNode.current.innerHTML = cssBgColor;
      }
      return function() {
        if (bgColorNode.current && document && document.head) {
          document.head.removeChild(bgColorNode.current);
          bgColorNode.current = null;
        }
      };
    }
  }, [backgroundColor]);
};
var use_theme_reset_styles_default = useThemeResetStyles;

// node_modules/@atlaskit/theme/dist/esm/utils/create-theme.js
var import_react40 = __toESM(require_react());
var _excluded = ["children"];
function createTheme(defaultGetTokens) {
  var emptyThemeFn = function emptyThemeFn2(getTokens, props) {
    return getTokens(props);
  };
  var ThemeContext = (0, import_react40.createContext)(defaultGetTokens);
  function useTheme2(themeProps) {
    var theme = (0, import_react40.useContext)(ThemeContext);
    var themeFn = theme || emptyThemeFn;
    var tokens = themeFn(themeProps);
    return tokens;
  }
  function Consumer2(props) {
    var children = props.children, themeProps = _objectWithoutProperties(props, _excluded);
    var tokens = useTheme2(themeProps);
    return import_react40.default.createElement(import_react40.default.Fragment, null, children(tokens));
  }
  function Provider2(props) {
    var themeFn = (0, import_react40.useContext)(ThemeContext);
    var valueFn = props.value || emptyThemeFn;
    var mixedFn = (0, import_react40.useCallback)(function(themeProps) {
      return valueFn(themeFn, themeProps);
    }, [themeFn, valueFn]);
    return import_react40.default.createElement(ThemeContext.Provider, {
      value: mixedFn
    }, props.children);
  }
  return {
    Consumer: Consumer2,
    Provider: Provider2,
    useTheme: useTheme2
  };
}

// node_modules/@atlaskit/theme/dist/esm/components/theme.js
var _createTheme = createTheme(function() {
  return {
    mode: "light"
  };
});
var Provider = _createTheme.Provider;
var Consumer = _createTheme.Consumer;
var useTheme = _createTheme.useTheme;
var theme_default = {
  Provider,
  Consumer
};

// node_modules/@atlaskit/theme/dist/esm/components/atlaskit-theme-provider.js
var themeFnMap = {
  dark: function dark() {
    return {
      mode: "dark"
    };
  },
  light: function light() {
    return {
      mode: "light"
    };
  }
};
var AtlaskitThemeProvider = (0, import_react41.memo)(function(_ref) {
  var _ref$mode = _ref.mode, mode = _ref$mode === void 0 ? DEFAULT_THEME_MODE : _ref$mode, _ref$background = _ref.background, background2 = _ref$background === void 0 ? background : _ref$background, children = _ref.children;
  var themeObj = {
    theme: {
      mode
    }
  };
  var backgroundColor = background2(themeObj);
  use_theme_reset_styles_default(backgroundColor);
  return import_react41.default.createElement(theme_default.Provider, {
    value: themeFnMap[mode]
  }, import_react41.default.createElement("div", {
    className: "".concat(mode, "-").concat(SELECTOR),
    style: {
      backgroundColor
    },
    "data-testid": "theme-provider"
  }, children));
});

// node_modules/@atlaskit/tooltip/dist/esm/TooltipPrimitive.js
var import_react42 = __toESM(require_react());
function ownKeys5(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread5(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys5(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys5(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var VAR_PRIMITIVE_ZINDEX = "tooltipPrimitiveZindex";
var primitiveStyles = css({
  zindex: "var(".concat(VAR_PRIMITIVE_ZINDEX, ")"),
  cursor: "default"
});
var TooltipPrimitive = (0, import_react42.forwardRef)(function TooltipPrimitive2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  var styleWithZIndex = _objectSpread5(_objectSpread5({}, style), {}, _defineProperty({}, VAR_PRIMITIVE_ZINDEX, layers.tooltip()));
  return jsx("div", {
    ref,
    style: styleWithZIndex,
    "data-testid": testId ? "".concat(testId, "--wrapper") : void 0
  }, jsx("div", {
    role: "tooltip",
    className,
    onMouseOut,
    onMouseOver,
    css: primitiveStyles,
    "data-placement": placement,
    "data-testid": testId,
    id
  }, children));
});
TooltipPrimitive.displayName = "TooltipPrimitive";
var TooltipPrimitive_default = TooltipPrimitive;

// node_modules/@atlaskit/tooltip/dist/esm/TooltipContainer.js
var baseStyles = css({
  boxSizing: "border-box",
  maxWidth: "240px",
  padding: "var(--ds-space-025, 2px)".concat(" ", "var(--ds-space-075, 6px)"),
  insetBlockStart: "var(--ds-space-0, 0px)",
  insetInlineStart: "var(--ds-space-0, 0px)",
  borderRadius: "var(--ds-border-radius, 3px)",
  fontSize: "var(--ds-font-size-075, 12px)",
  lineHeight: 1.3,
  overflowWrap: "break-word",
  wordWrap: "break-word"
});
var truncateStyles = css({
  maxWidth: "420px",
  textOverflow: "ellipsis",
  whiteSpace: "nowrap",
  // Use "clip" overflow to allow ellipses on x-axis without clipping descenders
  "@supports not (overflow-x: clip)": {
    overflow: "hidden"
  },
  "@supports (overflow-x: clip)": {
    overflowX: "clip"
  }
});
var lightStyles = css({
  backgroundColor: "var(--ds-background-neutral-bold, ".concat(N800, ")"),
  color: "var(--ds-text-inverse, ".concat(N0, ")")
});
var darkStyles = css({
  backgroundColor: "var(--ds-background-neutral-bold, ".concat(DN0, ")"),
  color: "var(--ds-text-inverse, ".concat(DN600, ")")
});
var TooltipContainer = (0, import_react44.forwardRef)(function TooltipContainer2(_ref, ref) {
  var style = _ref.style, className = _ref.className, children = _ref.children, truncate = _ref.truncate, placement = _ref.placement, testId = _ref.testId, onMouseOut = _ref.onMouseOut, onMouseOver = _ref.onMouseOver, id = _ref.id;
  return jsx(theme_default.Consumer, null, function(_ref2) {
    var mode = _ref2.mode;
    return jsx(TooltipPrimitive_default, {
      ref,
      style,
      className,
      placement,
      testId,
      id,
      onMouseOut,
      onMouseOver,
      css: [baseStyles, truncate ? truncateStyles : null, mode === "light" ? lightStyles : darkStyles]
    }, children);
  });
});
TooltipContainer.displayName = "TooltipContainer";
var TooltipContainer_default = TooltipContainer;

// node_modules/@atlaskit/tooltip/dist/esm/utilities.js
function getMousePosition(mouseCoordinates) {
  var safeMouse = mouseCoordinates || {
    top: 0,
    left: 0
  };
  var getBoundingClientRect2 = function getBoundingClientRect3() {
    return {
      top: safeMouse.top,
      left: safeMouse.left,
      bottom: safeMouse.top,
      right: safeMouse.left,
      width: 0,
      height: 0
    };
  };
  return {
    getBoundingClientRect: getBoundingClientRect2,
    clientWidth: 0,
    clientHeight: 0
  };
}

// node_modules/@atlaskit/tooltip/dist/esm/Tooltip.js
function ownKeys6(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread6(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys6(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys6(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var tooltipZIndex = layers.tooltip();
var analyticsAttributes = {
  componentName: "tooltip",
  packageName: "@atlaskit/tooltip",
  packageVersion: "17.8.7"
};
var invertedDirection2 = {
  top: "bottom",
  bottom: "top",
  left: "right",
  right: "left"
};
var getDirectionFromPlacement = function getDirectionFromPlacement2(placement) {
  return placement.split("-")[0];
};
function Tooltip(_ref) {
  var children = _ref.children, _ref$position = _ref.position, position = _ref$position === void 0 ? "bottom" : _ref$position, _ref$mousePosition = _ref.mousePosition, mousePosition = _ref$mousePosition === void 0 ? "bottom" : _ref$mousePosition, content = _ref.content, _ref$truncate = _ref.truncate, truncate = _ref$truncate === void 0 ? false : _ref$truncate, _ref$component = _ref.component, Container = _ref$component === void 0 ? TooltipContainer_default : _ref$component, _ref$tag = _ref.tag, TargetContainer = _ref$tag === void 0 ? "div" : _ref$tag, testId = _ref.testId, _ref$delay = _ref.delay, delay = _ref$delay === void 0 ? 300 : _ref$delay, _ref$onShow = _ref.onShow, onShow = _ref$onShow === void 0 ? noop5 : _ref$onShow, _ref$onHide = _ref.onHide, onHide = _ref$onHide === void 0 ? noop5 : _ref$onHide, _ref$hideTooltipOnCli = _ref.hideTooltipOnClick, hideTooltipOnClick = _ref$hideTooltipOnCli === void 0 ? false : _ref$hideTooltipOnCli, _ref$hideTooltipOnMou = _ref.hideTooltipOnMouseDown, hideTooltipOnMouseDown = _ref$hideTooltipOnMou === void 0 ? false : _ref$hideTooltipOnMou, analyticsContext = _ref.analyticsContext, _ref$strategy = _ref.strategy, strategy = _ref$strategy === void 0 ? "fixed" : _ref$strategy;
  var tooltipPosition = position === "mouse" ? mousePosition : position;
  var onShowHandler = usePlatformLeafSyntheticEventHandler(_objectSpread6({
    fn: onShow,
    action: "displayed",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var onHideHandler = usePlatformLeafSyntheticEventHandler(_objectSpread6({
    fn: onHide,
    action: "hidden",
    analyticsData: analyticsContext
  }, analyticsAttributes));
  var apiRef = (0, import_react46.useRef)(null);
  var _useState = (0, import_react46.useState)("hide"), _useState2 = _slicedToArray(_useState, 2), state = _useState2[0], setState = _useState2[1];
  var targetRef = (0, import_react46.useRef)(null);
  var containerRef = (0, import_react46.useRef)(null);
  var hasFunctionalChildren = typeof children === "function";
  var setRef3 = (0, import_react46.useCallback)(function(node) {
    if (!node) {
      return;
    }
    if (hasFunctionalChildren) {
      targetRef.current = node;
    } else {
      containerRef.current = node;
      targetRef.current = node.firstChild;
    }
  }, [hasFunctionalChildren]);
  var lastState = (0, import_react46.useRef)(state);
  var lastDelay = (0, import_react46.useRef)(delay);
  var lastHandlers = (0, import_react46.useRef)({
    onShowHandler,
    onHideHandler
  });
  var hasCalledShowHandler = (0, import_react46.useRef)(false);
  (0, import_react46.useEffect)(function() {
    lastState.current = state;
    lastDelay.current = delay;
    lastHandlers.current = {
      onShowHandler,
      onHideHandler
    };
  }, [delay, onHideHandler, onShowHandler, state]);
  var start2 = (0, import_react46.useCallback)(function(api) {
    apiRef.current = api;
    hasCalledShowHandler.current = false;
  }, []);
  var done = (0, import_react46.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    if (hasCalledShowHandler.current) {
      lastHandlers.current.onHideHandler();
    }
    apiRef.current = null;
    hasCalledShowHandler.current = false;
    setState("hide");
  }, []);
  var abort = (0, import_react46.useCallback)(function() {
    if (!apiRef.current) {
      return;
    }
    apiRef.current.abort();
    if (hasCalledShowHandler.current) {
      lastHandlers.current.onHideHandler();
    }
    apiRef.current = null;
  }, []);
  (0, import_react46.useEffect)(function mount() {
    return function unmount() {
      if (apiRef.current) {
        abort();
      }
    };
  }, [abort]);
  var showTooltip = (0, import_react46.useCallback)(function(source2) {
    if (apiRef.current && !apiRef.current.isActive()) {
      abort();
    }
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
    var entry = {
      source: source2,
      delay: lastDelay.current,
      show: function show2(_ref2) {
        var isImmediate = _ref2.isImmediate;
        if (!hasCalledShowHandler.current) {
          hasCalledShowHandler.current = true;
          lastHandlers.current.onShowHandler();
        }
        setState(isImmediate ? "show-immediate" : "fade-in");
      },
      hide: function hide2(_ref3) {
        var isImmediate = _ref3.isImmediate;
        if (isImmediate) {
          setState("hide");
        } else {
          setState("before-fade-out");
        }
      },
      done
    };
    var api = show(entry);
    start2(api);
  }, [abort, done, start2]);
  var hideTooltipOnEsc = (0, import_react46.useCallback)(function() {
    var _apiRef$current;
    (_apiRef$current = apiRef.current) === null || _apiRef$current === void 0 ? void 0 : _apiRef$current.requestHide({
      isImmediate: true
    });
  }, [apiRef]);
  useCloseOnEscapePress({
    onClose: hideTooltipOnEsc,
    isDisabled: state === "hide" || state === "fade-out"
  });
  (0, import_react46.useEffect)(function() {
    if (state === "hide") {
      return noop5;
    }
    if (state === "before-fade-out") {
      setState("fade-out");
    }
    var unbind = (0, import_bind_event_listener3.bind)(window, {
      type: "scroll",
      listener: function listener() {
        if (apiRef.current) {
          apiRef.current.requestHide({
            isImmediate: true
          });
        }
      },
      options: {
        capture: true,
        passive: true,
        once: true
      }
    });
    return unbind;
  }, [state]);
  var onMouseDown = (0, import_react46.useCallback)(function() {
    if (hideTooltipOnMouseDown && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnMouseDown]);
  var onClick = (0, import_react46.useCallback)(function() {
    if (hideTooltipOnClick && apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: true
      });
    }
  }, [hideTooltipOnClick]);
  var onMouseOver = (0, import_react46.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    var source2 = position === "mouse" ? {
      type: "mouse",
      // TODO: ideally not recalculating this object each time
      mouse: getMousePosition({
        left: event.clientX,
        top: event.clientY
      })
    } : {
      type: "keyboard"
    };
    showTooltip(source2);
  }, [position, showTooltip]);
  var onMouseOut = (0, import_react46.useCallback)(function(event) {
    if (containerRef.current && event.target === containerRef.current) {
      return;
    }
    if (event.defaultPrevented) {
      return;
    }
    event.preventDefault();
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onMouseMove = position === "mouse" ? function(event) {
    var _apiRef$current2;
    if ((_apiRef$current2 = apiRef.current) !== null && _apiRef$current2 !== void 0 && _apiRef$current2.isActive()) {
      apiRef.current.mousePosition = getMousePosition({
        left: event.clientX,
        top: event.clientY
      });
    }
  } : void 0;
  var onMouseOverTooltip = (0, import_react46.useCallback)(function() {
    if (apiRef.current && apiRef.current.isActive()) {
      apiRef.current.keep();
      return;
    }
  }, []);
  var onFocus = (0, import_react46.useCallback)(function() {
    showTooltip({
      type: "keyboard"
    });
  }, [showTooltip]);
  var onBlur = (0, import_react46.useCallback)(function() {
    if (apiRef.current) {
      apiRef.current.requestHide({
        isImmediate: false
      });
    }
  }, []);
  var onAnimationFinished = (0, import_react46.useCallback)(function(transition) {
    if (transition === "exiting" && lastState.current === "fade-out" && apiRef.current) {
      apiRef.current.finishHideAnimation();
    }
  }, []);
  var CastTargetContainer = TargetContainer;
  var shouldRenderTooltipContainer = state !== "hide" && Boolean(content);
  var shouldRenderTooltipChildren = state !== "hide" && state !== "fade-out";
  var getReferenceElement = function getReferenceElement2() {
    var _apiRef$current3;
    if (position === "mouse" && (_apiRef$current3 = apiRef.current) !== null && _apiRef$current3 !== void 0 && _apiRef$current3.mousePosition) {
      var _apiRef$current4;
      return (_apiRef$current4 = apiRef.current) === null || _apiRef$current4 === void 0 ? void 0 : _apiRef$current4.mousePosition;
    }
    return targetRef.current || void 0;
  };
  var tooltipId = useUniqueId2("tooltip", shouldRenderTooltipContainer);
  var tooltipTriggerProps = {
    onMouseOver,
    onMouseOut,
    onMouseMove,
    onMouseDown,
    onClick,
    onFocus,
    onBlur,
    ref: setRef3
  };
  if (testId) {
    tooltipTriggerProps["data-testid"] = "".concat(testId, "--container");
  }
  (0, import_react46.useEffect)(function() {
    if (!containerRef.current || !targetRef.current || !tooltipId) {
      return;
    }
    var target = targetRef.current;
    if (shouldRenderTooltipContainer) {
      target.setAttribute("aria-describedby", tooltipId);
    } else {
      target.removeAttribute("aria-describedby");
    }
  }, [shouldRenderTooltipContainer, tooltipId]);
  return jsx(import_react46.default.Fragment, null, typeof children === "function" ? (
    // once we deprecate the wrapped approach, we can put the aria
    // attribute back into the tooltipTriggerProps and make it required
    // instead of optional in `types`
    children(_objectSpread6(_objectSpread6({}, tooltipTriggerProps), {}, {
      "aria-describedby": tooltipId
    }))
  ) : jsx(CastTargetContainer, _extends({}, tooltipTriggerProps, {
    role: "presentation"
  }), children), shouldRenderTooltipContainer ? jsx(Portal, {
    zIndex: tooltipZIndex
  }, jsx(Popper2, {
    placement: tooltipPosition,
    referenceElement: getReferenceElement(),
    strategy
  }, function(_ref4) {
    var ref = _ref4.ref, style = _ref4.style, update = _ref4.update, placement = _ref4.placement;
    var direction = position === "mouse" ? void 0 : invertedDirection2[getDirectionFromPlacement(placement)];
    return jsx(exiting_persistence_default, {
      appear: true
    }, shouldRenderTooltipChildren && jsx(fade_in_default, {
      distance: "constant",
      entranceDirection: direction,
      exitDirection: direction,
      onFinish: onAnimationFinished,
      duration: state === "show-immediate" ? 0 : mediumDurationMs
    }, function(_ref5) {
      var className = _ref5.className;
      return jsx(Container, {
        ref,
        className: "Tooltip ".concat(className),
        style,
        truncate,
        placement: tooltipPosition,
        testId,
        onMouseOut,
        onMouseOver: onMouseOverTooltip,
        id: tooltipId
      }, typeof content === "function" ? content({
        update
      }) : content);
    }));
  })) : null);
}
Tooltip.displayName = "Tooltip";
var Tooltip_default = Tooltip;
export {
  TooltipPrimitive_default as TooltipPrimitive,
  Tooltip_default as default
};
//# sourceMappingURL=@atlaskit_tooltip.js.map
