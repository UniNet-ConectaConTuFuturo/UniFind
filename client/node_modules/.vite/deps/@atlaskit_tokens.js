import {
  COLOR_MODE_ATTRIBUTE,
  CURRENT_SURFACE_CSS_VAR,
  CUSTOM_THEME_ATTRIBUTE,
  THEME_DATA_ATTRIBUTE,
  TOKEN_NOT_FOUND_CSS_VAR,
  findMissingCustomStyleElements,
  hash,
  isValidBrandHex,
  themeColorModes,
  themeIds,
  themeIdsWithOverrides,
  themeStateDefaults,
  theme_config_default,
  token_names_default
} from "./chunk-4NIFE2DD.js";
import {
  require_dist,
  warnOnce
} from "./chunk-EGBE3PDB.js";
import {
  _classCallCheck,
  _createClass,
  _defineProperty,
  _slicedToArray,
  _toConsumableArray,
  _typeof
} from "./chunk-FPC23FGM.js";
import {
  require_react
} from "./chunk-RDZYK52F.js";
import {
  __commonJS,
  __toESM
} from "./chunk-5WWUZCGV.js";

// node_modules/@babel/runtime/helpers/typeof.js
var require_typeof = __commonJS({
  "node_modules/@babel/runtime/helpers/typeof.js"(exports, module) {
    function _typeof2(o) {
      "@babel/helpers - typeof";
      return module.exports = _typeof2 = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports, _typeof2(o);
    }
    module.exports = _typeof2, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/helpers/regeneratorRuntime.js
var require_regeneratorRuntime = __commonJS({
  "node_modules/@babel/runtime/helpers/regeneratorRuntime.js"(exports, module) {
    var _typeof2 = require_typeof()["default"];
    function _regeneratorRuntime4() {
      "use strict";
      module.exports = _regeneratorRuntime4 = function _regeneratorRuntime5() {
        return e;
      }, module.exports.__esModule = true, module.exports["default"] = module.exports;
      var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function(t2, e2, r2) {
        t2[e2] = r2.value;
      }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag";
      function define(t2, e2, r2) {
        return Object.defineProperty(t2, e2, {
          value: r2,
          enumerable: true,
          configurable: true,
          writable: true
        }), t2[e2];
      }
      try {
        define({}, "");
      } catch (t2) {
        define = function define2(t3, e2, r2) {
          return t3[e2] = r2;
        };
      }
      function wrap(t2, e2, r2, n2) {
        var i2 = e2 && e2.prototype instanceof Generator ? e2 : Generator, a2 = Object.create(i2.prototype), c2 = new Context(n2 || []);
        return o(a2, "_invoke", {
          value: makeInvokeMethod(t2, r2, c2)
        }), a2;
      }
      function tryCatch(t2, e2, r2) {
        try {
          return {
            type: "normal",
            arg: t2.call(e2, r2)
          };
        } catch (t3) {
          return {
            type: "throw",
            arg: t3
          };
        }
      }
      e.wrap = wrap;
      var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {};
      function Generator() {
      }
      function GeneratorFunction() {
      }
      function GeneratorFunctionPrototype() {
      }
      var p = {};
      define(p, a, function() {
        return this;
      });
      var d = Object.getPrototypeOf, v = d && d(d(values([])));
      v && v !== r && n.call(v, a) && (p = v);
      var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p);
      function defineIteratorMethods(t2) {
        ["next", "throw", "return"].forEach(function(e2) {
          define(t2, e2, function(t3) {
            return this._invoke(e2, t3);
          });
        });
      }
      function AsyncIterator(t2, e2) {
        function invoke(r3, o2, i2, a2) {
          var c2 = tryCatch(t2[r3], t2, o2);
          if ("throw" !== c2.type) {
            var u2 = c2.arg, h2 = u2.value;
            return h2 && "object" == _typeof2(h2) && n.call(h2, "__await") ? e2.resolve(h2.__await).then(function(t3) {
              invoke("next", t3, i2, a2);
            }, function(t3) {
              invoke("throw", t3, i2, a2);
            }) : e2.resolve(h2).then(function(t3) {
              u2.value = t3, i2(u2);
            }, function(t3) {
              return invoke("throw", t3, i2, a2);
            });
          }
          a2(c2.arg);
        }
        var r2;
        o(this, "_invoke", {
          value: function value(t3, n2) {
            function callInvokeWithMethodAndArg() {
              return new e2(function(e3, r3) {
                invoke(t3, n2, e3, r3);
              });
            }
            return r2 = r2 ? r2.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
          }
        });
      }
      function makeInvokeMethod(e2, r2, n2) {
        var o2 = h;
        return function(i2, a2) {
          if (o2 === f)
            throw new Error("Generator is already running");
          if (o2 === s) {
            if ("throw" === i2)
              throw a2;
            return {
              value: t,
              done: true
            };
          }
          for (n2.method = i2, n2.arg = a2; ; ) {
            var c2 = n2.delegate;
            if (c2) {
              var u2 = maybeInvokeDelegate(c2, n2);
              if (u2) {
                if (u2 === y)
                  continue;
                return u2;
              }
            }
            if ("next" === n2.method)
              n2.sent = n2._sent = n2.arg;
            else if ("throw" === n2.method) {
              if (o2 === h)
                throw o2 = s, n2.arg;
              n2.dispatchException(n2.arg);
            } else
              "return" === n2.method && n2.abrupt("return", n2.arg);
            o2 = f;
            var p2 = tryCatch(e2, r2, n2);
            if ("normal" === p2.type) {
              if (o2 = n2.done ? s : l, p2.arg === y)
                continue;
              return {
                value: p2.arg,
                done: n2.done
              };
            }
            "throw" === p2.type && (o2 = s, n2.method = "throw", n2.arg = p2.arg);
          }
        };
      }
      function maybeInvokeDelegate(e2, r2) {
        var n2 = r2.method, o2 = e2.iterator[n2];
        if (o2 === t)
          return r2.delegate = null, "throw" === n2 && e2.iterator["return"] && (r2.method = "return", r2.arg = t, maybeInvokeDelegate(e2, r2), "throw" === r2.method) || "return" !== n2 && (r2.method = "throw", r2.arg = new TypeError("The iterator does not provide a '" + n2 + "' method")), y;
        var i2 = tryCatch(o2, e2.iterator, r2.arg);
        if ("throw" === i2.type)
          return r2.method = "throw", r2.arg = i2.arg, r2.delegate = null, y;
        var a2 = i2.arg;
        return a2 ? a2.done ? (r2[e2.resultName] = a2.value, r2.next = e2.nextLoc, "return" !== r2.method && (r2.method = "next", r2.arg = t), r2.delegate = null, y) : a2 : (r2.method = "throw", r2.arg = new TypeError("iterator result is not an object"), r2.delegate = null, y);
      }
      function pushTryEntry(t2) {
        var e2 = {
          tryLoc: t2[0]
        };
        1 in t2 && (e2.catchLoc = t2[1]), 2 in t2 && (e2.finallyLoc = t2[2], e2.afterLoc = t2[3]), this.tryEntries.push(e2);
      }
      function resetTryEntry(t2) {
        var e2 = t2.completion || {};
        e2.type = "normal", delete e2.arg, t2.completion = e2;
      }
      function Context(t2) {
        this.tryEntries = [{
          tryLoc: "root"
        }], t2.forEach(pushTryEntry, this), this.reset(true);
      }
      function values(e2) {
        if (e2 || "" === e2) {
          var r2 = e2[a];
          if (r2)
            return r2.call(e2);
          if ("function" == typeof e2.next)
            return e2;
          if (!isNaN(e2.length)) {
            var o2 = -1, i2 = function next() {
              for (; ++o2 < e2.length; )
                if (n.call(e2, o2))
                  return next.value = e2[o2], next.done = false, next;
              return next.value = t, next.done = true, next;
            };
            return i2.next = i2;
          }
        }
        throw new TypeError(_typeof2(e2) + " is not iterable");
      }
      return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", {
        value: GeneratorFunctionPrototype,
        configurable: true
      }), o(GeneratorFunctionPrototype, "constructor", {
        value: GeneratorFunction,
        configurable: true
      }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function(t2) {
        var e2 = "function" == typeof t2 && t2.constructor;
        return !!e2 && (e2 === GeneratorFunction || "GeneratorFunction" === (e2.displayName || e2.name));
      }, e.mark = function(t2) {
        return Object.setPrototypeOf ? Object.setPrototypeOf(t2, GeneratorFunctionPrototype) : (t2.__proto__ = GeneratorFunctionPrototype, define(t2, u, "GeneratorFunction")), t2.prototype = Object.create(g), t2;
      }, e.awrap = function(t2) {
        return {
          __await: t2
        };
      }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function() {
        return this;
      }), e.AsyncIterator = AsyncIterator, e.async = function(t2, r2, n2, o2, i2) {
        void 0 === i2 && (i2 = Promise);
        var a2 = new AsyncIterator(wrap(t2, r2, n2, o2), i2);
        return e.isGeneratorFunction(r2) ? a2 : a2.next().then(function(t3) {
          return t3.done ? t3.value : a2.next();
        });
      }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function() {
        return this;
      }), define(g, "toString", function() {
        return "[object Generator]";
      }), e.keys = function(t2) {
        var e2 = Object(t2), r2 = [];
        for (var n2 in e2)
          r2.push(n2);
        return r2.reverse(), function next() {
          for (; r2.length; ) {
            var t3 = r2.pop();
            if (t3 in e2)
              return next.value = t3, next.done = false, next;
          }
          return next.done = true, next;
        };
      }, e.values = values, Context.prototype = {
        constructor: Context,
        reset: function reset(e2) {
          if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = false, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e2)
            for (var r2 in this)
              "t" === r2.charAt(0) && n.call(this, r2) && !isNaN(+r2.slice(1)) && (this[r2] = t);
        },
        stop: function stop() {
          this.done = true;
          var t2 = this.tryEntries[0].completion;
          if ("throw" === t2.type)
            throw t2.arg;
          return this.rval;
        },
        dispatchException: function dispatchException(e2) {
          if (this.done)
            throw e2;
          var r2 = this;
          function handle(n2, o3) {
            return a2.type = "throw", a2.arg = e2, r2.next = n2, o3 && (r2.method = "next", r2.arg = t), !!o3;
          }
          for (var o2 = this.tryEntries.length - 1; o2 >= 0; --o2) {
            var i2 = this.tryEntries[o2], a2 = i2.completion;
            if ("root" === i2.tryLoc)
              return handle("end");
            if (i2.tryLoc <= this.prev) {
              var c2 = n.call(i2, "catchLoc"), u2 = n.call(i2, "finallyLoc");
              if (c2 && u2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              } else if (c2) {
                if (this.prev < i2.catchLoc)
                  return handle(i2.catchLoc, true);
              } else {
                if (!u2)
                  throw new Error("try statement without catch or finally");
                if (this.prev < i2.finallyLoc)
                  return handle(i2.finallyLoc);
              }
            }
          }
        },
        abrupt: function abrupt(t2, e2) {
          for (var r2 = this.tryEntries.length - 1; r2 >= 0; --r2) {
            var o2 = this.tryEntries[r2];
            if (o2.tryLoc <= this.prev && n.call(o2, "finallyLoc") && this.prev < o2.finallyLoc) {
              var i2 = o2;
              break;
            }
          }
          i2 && ("break" === t2 || "continue" === t2) && i2.tryLoc <= e2 && e2 <= i2.finallyLoc && (i2 = null);
          var a2 = i2 ? i2.completion : {};
          return a2.type = t2, a2.arg = e2, i2 ? (this.method = "next", this.next = i2.finallyLoc, y) : this.complete(a2);
        },
        complete: function complete(t2, e2) {
          if ("throw" === t2.type)
            throw t2.arg;
          return "break" === t2.type || "continue" === t2.type ? this.next = t2.arg : "return" === t2.type ? (this.rval = this.arg = t2.arg, this.method = "return", this.next = "end") : "normal" === t2.type && e2 && (this.next = e2), y;
        },
        finish: function finish(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.finallyLoc === t2)
              return this.complete(r2.completion, r2.afterLoc), resetTryEntry(r2), y;
          }
        },
        "catch": function _catch(t2) {
          for (var e2 = this.tryEntries.length - 1; e2 >= 0; --e2) {
            var r2 = this.tryEntries[e2];
            if (r2.tryLoc === t2) {
              var n2 = r2.completion;
              if ("throw" === n2.type) {
                var o2 = n2.arg;
                resetTryEntry(r2);
              }
              return o2;
            }
          }
          throw new Error("illegal catch attempt");
        },
        delegateYield: function delegateYield(e2, r2, n2) {
          return this.delegate = {
            iterator: values(e2),
            resultName: r2,
            nextLoc: n2
          }, "next" === this.method && (this.arg = t), y;
        }
      }, e;
    }
    module.exports = _regeneratorRuntime4, module.exports.__esModule = true, module.exports["default"] = module.exports;
  }
});

// node_modules/@babel/runtime/regenerator/index.js
var require_regenerator = __commonJS({
  "node_modules/@babel/runtime/regenerator/index.js"(exports, module) {
    var runtime = require_regeneratorRuntime()();
    module.exports = runtime;
    try {
      regeneratorRuntime = runtime;
    } catch (accidentalStrictMode) {
      if (typeof globalThis === "object") {
        globalThis.regeneratorRuntime = runtime;
      } else {
        Function("r", "regeneratorRuntime = r")(runtime);
      }
    }
  }
});

// node_modules/@atlaskit/tokens/dist/esm/get-token.js
var name = "@atlaskit/tokens";
var version = "1.25.2";
function token(path, fallback) {
  var token2 = token_names_default[path];
  if (typeof process !== "undefined" && true && !token2) {
    warnOnce("Unknown token id at path: ".concat(path, " for ").concat(name, "@").concat(version));
  }
  if (!token2) {
    token2 = TOKEN_NOT_FOUND_CSS_VAR;
  }
  var tokenCall = fallback ? "var(".concat(token2, ", ").concat(fallback, ")") : "var(".concat(token2, ")");
  return tokenCall;
}
var get_token_default = token;

// node_modules/@atlaskit/tokens/dist/esm/get-token-value.js
var name2 = "@atlaskit/tokens";
var version2 = "1.25.2";
function getTokenValue(tokenId) {
  var fallback = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "";
  var token2 = token_names_default[tokenId];
  var tokenValue = fallback;
  if (typeof process !== "undefined" && true && !token2) {
    warnOnce("Unknown token id at path: ".concat(tokenId, " for ").concat(name2, "@").concat(version2));
  }
  if (typeof window === "undefined") {
    return tokenValue;
  }
  tokenValue = window.getComputedStyle(document.documentElement).getPropertyValue(token2).trim();
  tokenValue = tokenValue || fallback;
  return tokenValue;
}
var get_token_value_default = getTokenValue;

// node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function() {
    var self = this, args = arguments;
    return new Promise(function(resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(void 0);
    });
  };
}

// node_modules/@atlaskit/tokens/dist/esm/set-global-theme.js
var import_regenerator2 = __toESM(require_regenerator());

// node_modules/@atlaskit/tokens/dist/esm/theme-state-transformer.js
var themeKinds = ["light", "dark", "spacing", "typography", "shape"];
var customThemeOptions = "UNSAFE_themeOptions";
var isThemeKind = function isThemeKind2(themeKind) {
  return themeKinds.find(function(kind) {
    return kind === themeKind;
  }) !== void 0;
};
var isThemeIds = function isThemeIds2(themeId) {
  return themeIds.find(function(id) {
    return id === themeId;
  }) !== void 0;
};
var isColorMode = function isColorMode2(modeId) {
  return ["light", "dark", "auto"].includes(modeId);
};
var themeStringToObject = function themeStringToObject2(themeState) {
  return themeState.split(" ").map(function(theme) {
    return theme.split(/:([\s\S]*)/);
  }).reduce(function(themeObject, _ref2) {
    var _ref22 = _slicedToArray(_ref2, 2), kind = _ref22[0], id = _ref22[1];
    if (kind === "colorMode" && isColorMode(id)) {
      themeObject[kind] = id;
    }
    if (isThemeKind(kind) && isThemeIds(id)) {
      themeObject[kind] = id;
    }
    if (kind === customThemeOptions) {
      try {
        themeObject[customThemeOptions] = JSON.parse(id);
      } catch (e) {
        new Error("Invalid custom theme string");
      }
    }
    return themeObject;
  }, {});
};
var themeObjectToString = function themeObjectToString2(themeState) {
  return Object.entries(themeState).reduce(function(themeString, _ref3) {
    var _ref4 = _slicedToArray(_ref3, 2), kind = _ref4[0], id = _ref4[1];
    if (
      // colorMode theme state
      kind === "colorMode" && typeof id === "string" && isColorMode(id) || // custom theme state
      kind === customThemeOptions && _typeof(id) === "object" || // other theme states
      isThemeKind(kind) && typeof id === "string" && isThemeIds(id)
    ) {
      return themeString + "".concat(themeString ? " " : "") + "".concat(kind, ":").concat(_typeof(id) === "object" ? JSON.stringify(id) : id);
    }
    return themeString;
  }, "");
};

// node_modules/@atlaskit/tokens/dist/esm/get-theme-html-attrs.js
var defaultColorMode = "light";
var getThemeHtmlAttrs = function getThemeHtmlAttrs2() {
  var _result;
  var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$colorMode = _ref2.colorMode, colorMode = _ref$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref$colorMode, _ref$dark = _ref2.dark, dark2 = _ref$dark === void 0 ? themeStateDefaults["dark"] : _ref$dark, _ref$light = _ref2.light, light2 = _ref$light === void 0 ? themeStateDefaults["light"] : _ref$light, _ref$shape = _ref2.shape, shape2 = _ref$shape === void 0 ? themeStateDefaults["shape"] : _ref$shape, _ref$spacing = _ref2.spacing, spacing2 = _ref$spacing === void 0 ? themeStateDefaults["spacing"] : _ref$spacing, _ref$typography = _ref2.typography, typography2 = _ref$typography === void 0 ? themeStateDefaults["typography"] : _ref$typography, _ref$UNSAFE_themeOpti = _ref2.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref$UNSAFE_themeOpti;
  var themeAttribute = themeObjectToString({
    dark: dark2,
    light: light2,
    shape: shape2,
    spacing: spacing2,
    typography: typography2
  });
  var result = (_result = {}, _defineProperty(_result, THEME_DATA_ATTRIBUTE, themeAttribute), _defineProperty(_result, COLOR_MODE_ATTRIBUTE, colorMode === "auto" ? defaultColorMode : colorMode), _result);
  if (UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions.brandColor)) {
    var optionString = JSON.stringify(UNSAFE_themeOptions);
    var uniqueId = hash(optionString);
    result[CUSTOM_THEME_ATTRIBUTE] = uniqueId;
  }
  return result;
};
var get_theme_html_attrs_default = getThemeHtmlAttrs;

// node_modules/@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js
var import_bind_event_listener = __toESM(require_dist());

// node_modules/@atlaskit/tokens/dist/esm/utils/theme-loading.js
var import_regenerator = __toESM(require_regenerator());

// node_modules/@atlaskit/tokens/dist/esm/artifacts/theme-import-map.js
var themeImportsMap = {
  "light": function light() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light" */
      "./atlassian-light-FZZHNLM4.js"
    );
  },
  "dark": function dark() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark" */
      "./atlassian-dark-KRBBC6CX.js"
    );
  },
  "legacy-light": function legacyLight() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-legacy-light" */
      "./atlassian-legacy-light-OH2XWJKU.js"
    );
  },
  "legacy-dark": function legacyDark() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-legacy-dark" */
      "./atlassian-legacy-dark-WAPHGRKS.js"
    );
  },
  "spacing": function spacing() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-spacing" */
      "./atlassian-spacing-YDLQIITE.js"
    );
  },
  "typography-adg3": function typographyAdg3() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography-adg3" */
      "./atlassian-typography-adg3-2PCU2GGK.js"
    );
  },
  "shape": function shape() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-shape" */
      "./atlassian-shape-5WDZIB66.js"
    );
  },
  "light-new-input-border": function lightNewInputBorder() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light-new-input-border" */
      "./atlassian-light-new-input-border-UKJNXHHE.js"
    );
  },
  "dark-new-input-border": function darkNewInputBorder() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark-new-input-border" */
      "./atlassian-dark-new-input-border-CEIB34F4.js"
    );
  },
  "light-saturated-palette-changes": function lightSaturatedPaletteChanges() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-light-saturated-palette-changes" */
      "./atlassian-light-saturated-palette-changes-G3EAKZND.js"
    );
  },
  "dark-saturated-palette-changes": function darkSaturatedPaletteChanges() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-dark-saturated-palette-changes" */
      "./atlassian-dark-saturated-palette-changes-4B445IXK.js"
    );
  },
  "typography": function typography() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography" */
      "./atlassian-typography-KAIQ5GWY.js"
    );
  },
  "typography-minor3": function typographyMinor3() {
    return import(
      /* webpackChunkName: "@atlaskit-internal_atlassian-typography-minor3" */
      "./atlassian-typography-minor3-2I2472YE.js"
    );
  }
};
var theme_import_map_default = themeImportsMap;

// node_modules/@atlaskit/tokens/dist/esm/utils/theme-loading.js
var loadAndAppendThemeCss = function() {
  var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee(themeId) {
    var themeCss, style;
    return import_regenerator.default.wrap(function _callee$(_context) {
      while (1)
        switch (_context.prev = _context.next) {
          case 0:
            if (!document.head.querySelector("style[".concat(THEME_DATA_ATTRIBUTE, '="').concat(themeId, '"]:not([').concat(CUSTOM_THEME_ATTRIBUTE, "])"))) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            _context.next = 4;
            return loadThemeCss(themeId);
          case 4:
            themeCss = _context.sent;
            style = document.createElement("style");
            style.textContent = themeCss;
            style.dataset.theme = themeId;
            document.head.appendChild(style);
          case 9:
          case "end":
            return _context.stop();
        }
    }, _callee);
  }));
  return function loadAndAppendThemeCss2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var loadThemeCss = function() {
  var _ref2 = _asyncToGenerator(import_regenerator.default.mark(function _callee2(themeId) {
    var _yield$themeImportMap, themeCss;
    return import_regenerator.default.wrap(function _callee2$(_context2) {
      while (1)
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return theme_import_map_default[themeId]();
          case 2:
            _yield$themeImportMap = _context2.sent;
            themeCss = _yield$themeImportMap.default;
            return _context2.abrupt("return", themeCss);
          case 5:
          case "end":
            return _context2.stop();
        }
    }, _callee2);
  }));
  return function loadThemeCss2(_x2) {
    return _ref2.apply(this, arguments);
  };
}();
var darkModeMediaQuery = "(prefers-color-scheme: dark)";

// node_modules/@atlaskit/tokens/dist/esm/utils/color-mode-listeners.js
var isMatchMediaAvailable = typeof window !== "undefined" && "matchMedia" in window;
function checkNativeListener(e) {
  var element = document.documentElement;
  element.setAttribute(COLOR_MODE_ATTRIBUTE, e.matches ? "dark" : "light");
}
var darkModeMql = isMatchMediaAvailable && window.matchMedia(darkModeMediaQuery);
var ColorModeObserver = function() {
  function ColorModeObserver2() {
    _classCallCheck(this, ColorModeObserver2);
    _defineProperty(this, "unbindThemeChangeListener", null);
  }
  _createClass(ColorModeObserver2, [{
    key: "getColorMode",
    value: function getColorMode() {
      if (!darkModeMql) {
        return "light";
      }
      return darkModeMql !== null && darkModeMql !== void 0 && darkModeMql.matches ? "dark" : "light";
    }
  }, {
    key: "bind",
    value: function bind() {
      if (darkModeMql && this.unbindThemeChangeListener === null) {
        this.unbindThemeChangeListener = (0, import_bind_event_listener.bind)(darkModeMql, {
          type: "change",
          listener: checkNativeListener
        });
      }
    }
  }, {
    key: "unbind",
    value: function unbind() {
      if (this.unbindThemeChangeListener) {
        this.unbindThemeChangeListener();
        this.unbindThemeChangeListener = null;
      }
    }
  }]);
  return ColorModeObserver2;
}();
var SingletonColorModeObserver = new ColorModeObserver();
var color_mode_listeners_default = SingletonColorModeObserver;

// node_modules/@atlaskit/tokens/dist/esm/utils/configure-page.js
function configurePage(themeState) {
  if (themeState.colorMode === "auto") {
    themeState.colorMode = color_mode_listeners_default.getColorMode();
    color_mode_listeners_default.bind();
  } else {
    color_mode_listeners_default.unbind();
  }
  var themeAttributes = get_theme_html_attrs_default(themeState);
  Object.entries(themeAttributes).forEach(function(_ref2) {
    var _ref22 = _slicedToArray(_ref2, 2), key = _ref22[0], value = _ref22[1];
    document.documentElement.setAttribute(key, value);
  });
  return function() {
    return color_mode_listeners_default.unbind;
  };
}

// node_modules/@atlaskit/platform-feature-flags/dist/esm/debug.js
var _ref;
var _globalThis$process;
var _globalThis$process$e;
var _globalThis$process2;
var _globalThis$process2$;
var TESTS_MODE = (_ref = (globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$process = globalThis.process) === null || _globalThis$process === void 0 ? void 0 : (_globalThis$process$e = _globalThis$process.env) === null || _globalThis$process$e === void 0 ? void 0 : _globalThis$process$e.JEST_WORKER_ID) !== void 0) !== null && _ref !== void 0 ? _ref : false;
var DEBUG_MODE = !TESTS_MODE && (globalThis === null || globalThis === void 0 ? void 0 : (_globalThis$process2 = globalThis.process) === null || _globalThis$process2 === void 0 ? void 0 : (_globalThis$process2$ = _globalThis$process2.env) === null || _globalThis$process2$ === void 0 ? void 0 : _globalThis$process2$.NODE_ENV) !== "production";
var debug = function debug2() {
  var _console;
  if (!DEBUG_MODE) {
    return;
  }
  (_console = console).debug.apply(_console, arguments);
};

// node_modules/@atlaskit/platform-feature-flags/dist/esm/resolvers.js
var pkgName = "@atlaskit/platform-feature-flags";
var PFF_GLOBAL_KEY = "__PLATFORM_FEATURE_FLAGS__";
var hasProcessEnv = typeof process !== "undefined" && typeof process.env !== "undefined";
var ENV_ENABLE_PLATFORM_FF = hasProcessEnv ? (
  // Use global "process" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin
  process.env["ENABLE_PLATFORM_FF"] === "true"
) : false;
var ENV_STORYBOOK_ENABLE_PLATFORM_FF = hasProcessEnv ? (
  // Use global "process" variable and process.env['FLAG_NAME'] syntax, so it can be replaced by webpack DefinePlugin
  process.env["STORYBOOK_ENABLE_PLATFORM_FF"] === "true"
) : false;
var ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE = ENV_ENABLE_PLATFORM_FF || ENV_STORYBOOK_ENABLE_PLATFORM_FF;
var DEFAULT_PFF_GLOBAL = {
  // In development mode we want to capture any feature flag checks that happen using the default resolver and log this result when the resolver is replaced.
  // This is because evaluating feature flags when the resolver/FF client is loaded asynchronously could cause unexpected issues.
  earlyResolvedFlags: /* @__PURE__ */ new Map(),
  booleanResolver: function booleanResolver(flagKey) {
    if (true) {
      var unresolvedFlagCount = this.earlyResolvedFlags.get(flagKey) || 0;
      this.earlyResolvedFlags.set(flagKey, unresolvedFlagCount + 1);
    }
    return false;
  }
};
var globalVar = typeof window !== "undefined" ? window : globalThis;
globalVar[PFF_GLOBAL_KEY] = globalVar[PFF_GLOBAL_KEY] || DEFAULT_PFF_GLOBAL;
function resolveBooleanFlag(flagKey) {
  if (ENABLE_GLOBAL_PLATFORM_FF_OVERRIDE) {
    debug('[%s]: The feature flags were enabled while running tests. The flag "%s" will be always enabled.', pkgName, flagKey);
    return true;
  }
  try {
    var _globalVar$PFF_GLOBAL3;
    var result = (_globalVar$PFF_GLOBAL3 = globalVar[PFF_GLOBAL_KEY]) === null || _globalVar$PFF_GLOBAL3 === void 0 ? void 0 : _globalVar$PFF_GLOBAL3.booleanResolver(flagKey);
    if (typeof result !== "boolean") {
      console.warn("".concat(flagKey, " resolved to a non-boolean value, returning false for safety"));
      return false;
    }
    return result;
  } catch (e) {
    return false;
  }
}

// node_modules/@atlaskit/platform-feature-flags/dist/esm/index.js
function getBooleanFF(name3) {
  return resolveBooleanFlag(name3);
}

// node_modules/@atlaskit/tokens/dist/esm/utils/get-theme-preferences.js
var getThemePreferences = function getThemePreferences2(themeState) {
  var colorMode = themeState.colorMode, dark2 = themeState.dark, light2 = themeState.light, shape2 = themeState.shape, spacing2 = themeState.spacing, typography2 = themeState.typography;
  var themePreferences = colorMode === "auto" ? [light2, dark2] : [themeState[colorMode]];
  if (getBooleanFF("platform.design-system-team.saturated-palette-changes_asoro")) {
    themePreferences.forEach(function(themeId, index) {
      if (themeId === "light") {
        themePreferences[index] = "light-saturated-palette-changes";
      }
      if (themeId === "dark") {
        themePreferences[index] = "dark-saturated-palette-changes";
      }
    });
  }
  [shape2, spacing2, typography2].forEach(function(themeId) {
    if (themeId) {
      themePreferences.push(themeId);
    }
  });
  return _toConsumableArray(new Set(themePreferences));
};
var getThemeOverridePreferences = function getThemeOverridePreferences2(themeState) {
  var colorMode = themeState.colorMode, dark2 = themeState.dark, light2 = themeState.light;
  var themeOverridePreferences = [];
  var themePreferences = colorMode === "auto" ? [light2, dark2] : [themeState[colorMode]];
  if (getBooleanFF("platform.design-system-team.border-checkbox_nyoiu")) {
    themePreferences.includes("light") && themeOverridePreferences.push("light-new-input-border");
    themePreferences.includes("dark") && themeOverridePreferences.push("dark-new-input-border");
  }
  return _toConsumableArray(new Set(themeOverridePreferences));
};

// node_modules/@atlaskit/tokens/dist/esm/set-global-theme.js
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it)
        o = it;
      var i = 0;
      var F = function F2() {
      };
      return { s: F, n: function n() {
        if (i >= o.length)
          return { done: true };
        return { done: false, value: o[i++] };
      }, e: function e(_e) {
        throw _e;
      }, f: F };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return { s: function s() {
    it = it.call(o);
  }, n: function n() {
    var step = it.next();
    normalCompletion = step.done;
    return step;
  }, e: function e(_e2) {
    didErr = true;
    err = _e2;
  }, f: function f() {
    try {
      if (!normalCompletion && it.return != null)
        it.return();
    } finally {
      if (didErr)
        throw err;
    }
  } };
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o)
    return;
  if (typeof o === "string")
    return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor)
    n = o.constructor.name;
  if (n === "Map" || n === "Set")
    return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length)
    len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++)
    arr2[i] = arr[i];
  return arr2;
}
var setGlobalTheme = function() {
  var _ref2 = _asyncToGenerator(import_regenerator2.default.mark(function _callee3() {
    var _ref22, _ref2$colorMode, colorMode, _ref2$dark, dark2, _ref2$light, light2, _ref2$shape, shape2, _ref2$spacing, spacing2, _ref2$typography, typography2, _ref2$UNSAFE_themeOpt, UNSAFE_themeOptions, themeLoader, themeState, themePreferences, loadingStrategy, loadingTasks, mode, attrOfMissingCustomStyles, themeOverridePreferences, _iterator, _step, themeId, autoUnbind, _args3 = arguments;
    return import_regenerator2.default.wrap(function _callee3$(_context3) {
      while (1)
        switch (_context3.prev = _context3.next) {
          case 0:
            _ref22 = _args3.length > 0 && _args3[0] !== void 0 ? _args3[0] : {}, _ref2$colorMode = _ref22.colorMode, colorMode = _ref2$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref2$colorMode, _ref2$dark = _ref22.dark, dark2 = _ref2$dark === void 0 ? themeStateDefaults["dark"] : _ref2$dark, _ref2$light = _ref22.light, light2 = _ref2$light === void 0 ? themeStateDefaults["light"] : _ref2$light, _ref2$shape = _ref22.shape, shape2 = _ref2$shape === void 0 ? themeStateDefaults["shape"] : _ref2$shape, _ref2$spacing = _ref22.spacing, spacing2 = _ref2$spacing === void 0 ? themeStateDefaults["spacing"] : _ref2$spacing, _ref2$typography = _ref22.typography, typography2 = _ref2$typography === void 0 ? themeStateDefaults["typography"] : _ref2$typography, _ref2$UNSAFE_themeOpt = _ref22.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref2$UNSAFE_themeOpt === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref2$UNSAFE_themeOpt;
            themeLoader = _args3.length > 1 ? _args3[1] : void 0;
            themeState = {
              colorMode,
              dark: dark2,
              light: light2,
              shape: shape2,
              spacing: spacing2,
              typography: typography2,
              UNSAFE_themeOptions: themeLoader ? void 0 : UNSAFE_themeOptions
            };
            themePreferences = getThemePreferences(themeState);
            loadingStrategy = themeLoader ? themeLoader : loadAndAppendThemeCss;
            loadingTasks = themePreferences.map(function() {
              var _ref3 = _asyncToGenerator(import_regenerator2.default.mark(function _callee(themeId2) {
                return import_regenerator2.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.next = 2;
                        return loadingStrategy(themeId2);
                      case 2:
                        return _context.abrupt("return", _context.sent);
                      case 3:
                      case "end":
                        return _context.stop();
                    }
                }, _callee);
              }));
              return function(_x) {
                return _ref3.apply(this, arguments);
              };
            }());
            if (!themeLoader && UNSAFE_themeOptions && isValidBrandHex(UNSAFE_themeOptions === null || UNSAFE_themeOptions === void 0 ? void 0 : UNSAFE_themeOptions.brandColor)) {
              mode = colorMode || themeStateDefaults["colorMode"];
              attrOfMissingCustomStyles = findMissingCustomStyleElements(UNSAFE_themeOptions, mode);
              if (attrOfMissingCustomStyles.length > 0) {
                loadingTasks.push(_asyncToGenerator(import_regenerator2.default.mark(function _callee2() {
                  var _yield$import, loadAndAppendCustomThemeCss;
                  return import_regenerator2.default.wrap(function _callee2$(_context2) {
                    while (1)
                      switch (_context2.prev = _context2.next) {
                        case 0:
                          _context2.next = 2;
                          return import(
                            /* webpackChunkName: "@atlaskit-internal_atlassian-custom-theme" */
                            "./custom-theme-GKAJB2UN.js"
                          );
                        case 2:
                          _yield$import = _context2.sent;
                          loadAndAppendCustomThemeCss = _yield$import.loadAndAppendCustomThemeCss;
                          loadAndAppendCustomThemeCss({
                            colorMode: attrOfMissingCustomStyles.length === 2 ? "auto" : (
                              // only load the missing custom theme styles
                              attrOfMissingCustomStyles[0]
                            ),
                            UNSAFE_themeOptions
                          });
                        case 5:
                        case "end":
                          return _context2.stop();
                      }
                  }, _callee2);
                }))());
              }
            }
            _context3.next = 9;
            return Promise.all(loadingTasks);
          case 9:
            themeOverridePreferences = getThemeOverridePreferences(themeState);
            _iterator = _createForOfIteratorHelper(themeOverridePreferences);
            _context3.prev = 11;
            _iterator.s();
          case 13:
            if ((_step = _iterator.n()).done) {
              _context3.next = 19;
              break;
            }
            themeId = _step.value;
            _context3.next = 17;
            return loadingStrategy(themeId);
          case 17:
            _context3.next = 13;
            break;
          case 19:
            _context3.next = 24;
            break;
          case 21:
            _context3.prev = 21;
            _context3.t0 = _context3["catch"](11);
            _iterator.e(_context3.t0);
          case 24:
            _context3.prev = 24;
            _iterator.f();
            return _context3.finish(24);
          case 27:
            autoUnbind = configurePage(themeState);
            return _context3.abrupt("return", autoUnbind);
          case 29:
          case "end":
            return _context3.stop();
        }
    }, _callee3, null, [[11, 21, 24, 27]]);
  }));
  return function setGlobalTheme2() {
    return _ref2.apply(this, arguments);
  };
}();
var set_global_theme_default = setGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/enable-global-theme.js
var enableGlobalTheme = function enableGlobalTheme2() {
  var _ref2 = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {}, _ref$colorMode = _ref2.colorMode, colorMode = _ref$colorMode === void 0 ? themeStateDefaults["colorMode"] : _ref$colorMode, _ref$dark = _ref2.dark, dark2 = _ref$dark === void 0 ? themeStateDefaults["dark"] : _ref$dark, _ref$light = _ref2.light, light2 = _ref$light === void 0 ? themeStateDefaults["light"] : _ref$light, _ref$shape = _ref2.shape, shape2 = _ref$shape === void 0 ? themeStateDefaults["shape"] : _ref$shape, _ref$spacing = _ref2.spacing, spacing2 = _ref$spacing === void 0 ? themeStateDefaults["spacing"] : _ref$spacing, _ref$typography = _ref2.typography, typography2 = _ref$typography === void 0 ? themeStateDefaults["typography"] : _ref$typography, _ref$UNSAFE_themeOpti = _ref2.UNSAFE_themeOptions, UNSAFE_themeOptions = _ref$UNSAFE_themeOpti === void 0 ? themeStateDefaults["UNSAFE_themeOptions"] : _ref$UNSAFE_themeOpti;
  var themeLoader = arguments.length > 1 ? arguments[1] : void 0;
  var themeState = {
    colorMode,
    dark: dark2,
    light: light2,
    shape: shape2,
    spacing: spacing2,
    typography: typography2,
    UNSAFE_themeOptions: themeLoader ? void 0 : UNSAFE_themeOptions
  };
  var themePreferences = getThemePreferences(themeState);
  if (themeLoader) {
    themePreferences.map(function(themeId) {
      return themeLoader(themeId);
    });
  }
  var autoUnbind = configurePage(themeState);
  return autoUnbind;
};
var enable_global_theme_default = enableGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/get-theme-styles.js
var import_regenerator3 = __toESM(require_regenerator());
var getThemeStyles = function() {
  var _ref2 = _asyncToGenerator(import_regenerator3.default.mark(function _callee3(preferences) {
    var themePreferences, themeOverridePreferences, themeState, results;
    return import_regenerator3.default.wrap(function _callee3$(_context3) {
      while (1)
        switch (_context3.prev = _context3.next) {
          case 0:
            themeOverridePreferences = [];
            if (preferences === "all") {
              themePreferences = themeIdsWithOverrides;
            } else {
              themeState = {
                colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults["colorMode"],
                dark: (preferences === null || preferences === void 0 ? void 0 : preferences.dark) || themeStateDefaults["dark"],
                light: (preferences === null || preferences === void 0 ? void 0 : preferences.light) || themeStateDefaults["light"],
                shape: (preferences === null || preferences === void 0 ? void 0 : preferences.shape) || themeStateDefaults["shape"],
                spacing: (preferences === null || preferences === void 0 ? void 0 : preferences.spacing) || themeStateDefaults["spacing"],
                typography: (preferences === null || preferences === void 0 ? void 0 : preferences.typography) || themeStateDefaults["typography"]
              };
              themePreferences = getThemePreferences(themeState);
              themeOverridePreferences = getThemeOverridePreferences(themeState);
            }
            _context3.next = 4;
            return Promise.all([].concat(_toConsumableArray([].concat(_toConsumableArray(themePreferences), _toConsumableArray(themeOverridePreferences)).map(function() {
              var _ref22 = _asyncToGenerator(import_regenerator3.default.mark(function _callee(themeId) {
                var css;
                return import_regenerator3.default.wrap(function _callee$(_context) {
                  while (1)
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return loadThemeCss(themeId);
                      case 3:
                        css = _context.sent;
                        return _context.abrupt("return", {
                          id: themeId,
                          attrs: {
                            "data-theme": themeId
                          },
                          css
                        });
                      case 7:
                        _context.prev = 7;
                        _context.t0 = _context["catch"](0);
                        return _context.abrupt("return", void 0);
                      case 10:
                      case "end":
                        return _context.stop();
                    }
                }, _callee, null, [[0, 7]]);
              }));
              return function(_x2) {
                return _ref22.apply(this, arguments);
              };
            }())), [
              // Add custom themes if they're present
              _asyncToGenerator(import_regenerator3.default.mark(function _callee2() {
                var _preferences$UNSAFE_t;
                var _yield$import, getCustomThemeStyles, customThemeStyles;
                return import_regenerator3.default.wrap(function _callee2$(_context2) {
                  while (1)
                    switch (_context2.prev = _context2.next) {
                      case 0:
                        if (!(preferences !== "all" && preferences !== null && preferences !== void 0 && preferences.UNSAFE_themeOptions && isValidBrandHex(preferences === null || preferences === void 0 || (_preferences$UNSAFE_t = preferences.UNSAFE_themeOptions) === null || _preferences$UNSAFE_t === void 0 ? void 0 : _preferences$UNSAFE_t.brandColor))) {
                          _context2.next = 15;
                          break;
                        }
                        _context2.prev = 1;
                        _context2.next = 4;
                        return import(
                          /* webpackChunkName: "@atlaskit-internal_atlassian-custom-theme" */
                          "./custom-theme-GKAJB2UN.js"
                        );
                      case 4:
                        _yield$import = _context2.sent;
                        getCustomThemeStyles = _yield$import.getCustomThemeStyles;
                        _context2.next = 8;
                        return getCustomThemeStyles({
                          colorMode: (preferences === null || preferences === void 0 ? void 0 : preferences.colorMode) || themeStateDefaults["colorMode"],
                          UNSAFE_themeOptions: preferences === null || preferences === void 0 ? void 0 : preferences.UNSAFE_themeOptions
                        });
                      case 8:
                        customThemeStyles = _context2.sent;
                        return _context2.abrupt("return", customThemeStyles);
                      case 12:
                        _context2.prev = 12;
                        _context2.t0 = _context2["catch"](1);
                        return _context2.abrupt("return", void 0);
                      case 15:
                      case "end":
                        return _context2.stop();
                    }
                }, _callee2, null, [[1, 12]]);
              }))()
            ]));
          case 4:
            results = _context3.sent;
            return _context3.abrupt("return", results.flat().filter(function(theme) {
              return theme !== void 0;
            }));
          case 6:
          case "end":
            return _context3.stop();
        }
    }, _callee3);
  }));
  return function getThemeStyles2(_x) {
    return _ref2.apply(this, arguments);
  };
}();
var get_theme_styles_default = getThemeStyles;

// node_modules/@atlaskit/tokens/dist/esm/get-ssr-auto-script.js
var getSSRAutoScript = function getSSRAutoScript2(colorMode) {
  return colorMode === "auto" ? "(\n  () => {\n    try {\n      const mql = window.matchMedia('".concat(darkModeMediaQuery, "');\n      const colorMode = mql.matches ? 'dark' : 'light';\n      document.documentElement.setAttribute('").concat(COLOR_MODE_ATTRIBUTE, "', colorMode);\n    } catch (e) {}\n  }\n)()") : void 0;
};
var get_ssr_auto_script_default = getSSRAutoScript;

// node_modules/@atlaskit/tokens/dist/esm/use-theme-observer.js
var import_react = __toESM(require_react());

// node_modules/@atlaskit/tokens/dist/esm/get-global-theme.js
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
var isThemeColorMode = function isThemeColorMode2(colorMode) {
  return themeColorModes.find(function(mode) {
    return mode === colorMode;
  }) !== void 0;
};
var getGlobalTheme = function getGlobalTheme2() {
  if (typeof document === "undefined") {
    return {};
  }
  var element = document.documentElement;
  var colorMode = element.getAttribute(COLOR_MODE_ATTRIBUTE) || "";
  var theme = element.getAttribute(THEME_DATA_ATTRIBUTE) || "";
  return _objectSpread(_objectSpread({}, themeStringToObject(theme)), isThemeColorMode(colorMode) && {
    colorMode
  });
};
var get_global_theme_default = getGlobalTheme;

// node_modules/@atlaskit/tokens/dist/esm/theme-mutation-observer.js
var ThemeMutationObserver = function() {
  function ThemeMutationObserver2(callback) {
    _classCallCheck(this, ThemeMutationObserver2);
    _defineProperty(this, "observer", null);
    _defineProperty(this, "mediaObserver", null);
    this.callback = callback;
  }
  _createClass(ThemeMutationObserver2, [{
    key: "observe",
    value: function observe() {
      var _this = this;
      if (!this.observer) {
        this.observer = new MutationObserver(function() {
          _this.callback(get_global_theme_default());
        });
      }
      this.observer.observe(document.documentElement, {
        attributeFilter: [THEME_DATA_ATTRIBUTE, COLOR_MODE_ATTRIBUTE]
      });
    }
  }, {
    key: "disconnect",
    value: function disconnect() {
      this.observer && this.observer.disconnect();
    }
  }]);
  return ThemeMutationObserver2;
}();

// node_modules/@atlaskit/tokens/dist/esm/use-theme-observer.js
var useThemeObserver = function useThemeObserver2() {
  var _useState = (0, import_react.useState)(get_global_theme_default()), _useState2 = _slicedToArray(_useState, 2), theme = _useState2[0], setTheme = _useState2[1];
  (0, import_react.useEffect)(function() {
    var observer = new ThemeMutationObserver(function(theme2) {
      return setTheme(theme2);
    });
    observer.observe();
    return function() {
      return observer.disconnect();
    };
  }, []);
  return theme;
};
var use_theme_observer_default = useThemeObserver;
export {
  CURRENT_SURFACE_CSS_VAR,
  ThemeMutationObserver,
  enable_global_theme_default as enableGlobalTheme,
  get_global_theme_default as getGlobalTheme,
  get_ssr_auto_script_default as getSSRAutoScript,
  get_theme_html_attrs_default as getThemeHtmlAttrs,
  get_theme_styles_default as getThemeStyles,
  get_token_value_default as getTokenValue,
  set_global_theme_default as setGlobalTheme,
  theme_config_default as themeConfig,
  themeObjectToString,
  themeStringToObject,
  get_token_default as token,
  use_theme_observer_default as useThemeObserver
};
/*! Bundled license information:

@babel/runtime/helpers/regeneratorRuntime.js:
  (*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE *)
*/
//# sourceMappingURL=@atlaskit_tokens.js.map
