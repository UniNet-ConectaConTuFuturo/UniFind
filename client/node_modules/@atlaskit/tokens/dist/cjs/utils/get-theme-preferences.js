"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getThemePreferences = exports.getThemeOverridePreferences = void 0;
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _platformFeatureFlags = require("@atlaskit/platform-feature-flags");
var getThemePreferences = exports.getThemePreferences = function getThemePreferences(themeState) {
  var colorMode = themeState.colorMode,
    dark = themeState.dark,
    light = themeState.light,
    shape = themeState.shape,
    spacing = themeState.spacing,
    typography = themeState.typography;
  var themePreferences = colorMode === 'auto' ? [light, dark] : [themeState[colorMode]];

  // Replace light/dark theme with new palette if feature flag is on
  if ((0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.saturated-palette-changes_asoro')) {
    // Iterate over themePreferences and swap out light/dark with new palette
    themePreferences.forEach(function (themeId, index) {
      if (themeId === 'light') {
        themePreferences[index] = 'light-saturated-palette-changes';
      }
      if (themeId === 'dark') {
        themePreferences[index] = 'dark-saturated-palette-changes';
      }
    });
  }
  [shape, spacing, typography].forEach(function (themeId) {
    if (themeId) {
      themePreferences.push(themeId);
    }
  });
  return (0, _toConsumableArray2.default)(new Set(themePreferences));
};
var getThemeOverridePreferences = exports.getThemeOverridePreferences = function getThemeOverridePreferences(themeState) {
  var colorMode = themeState.colorMode,
    dark = themeState.dark,
    light = themeState.light;
  var themeOverridePreferences = [];
  var themePreferences = colorMode === 'auto' ? [light, dark] : [themeState[colorMode]];
  if ((0, _platformFeatureFlags.getBooleanFF)('platform.design-system-team.border-checkbox_nyoiu')) {
    themePreferences.includes('light') && themeOverridePreferences.push('light-new-input-border');
    themePreferences.includes('dark') && themeOverridePreferences.push('dark-new-input-border');
  }
  return (0, _toConsumableArray2.default)(new Set(themeOverridePreferences));
};